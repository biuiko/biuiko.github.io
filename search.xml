<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[TCP三次握手与四次挥手]]></title>
    <url>%2F2019%2F01%2F03%2FTCP%2F</url>
    <content type="text"><![CDATA[TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、提供可靠交付的、有拥塞控制和流量控制、基于字节流的传输层协议 首部格式 源端口和目的端口：各占2个字节，端口是传输层和应用层的服务接口，实现传输层的复用和分用功能 序号：占4个字节，对字节流进行编号，表示本报文段的第一个字节的序号。例如一个报文段的序号为20，携带的数据长度为30，则下一个期望收到的报文段序号为50。 确认号：占4个字节，期望收到的下一个报文段的序号 数据偏移：占4位，指的就是首部长度，表示TCP报文段数据起始处到TCP报文段起始处的位置距离 保留：占6位，保留为今后使用 URG：当URG=1时，表明紧急指针字段有效，告诉系统报文段中有紧急数据，应尽快传送 ACK：当ACK=1是确认号字段才有效 PSH：PSH=1时，应尽快将报文段交付给应用进程，而不是等缓存满了以后一起交给应用进程 RST:RST=1时表示TCP连接中出现严重错误，比如主机崩溃等，要求释放链接并重新建立连接 SYN：SYN=1时表示这个报文是一个连接请求或连接接收的报文 FIN：FIN=1是表示报文段的发送方已发送完所有数据，要求释放链接。 窗口：因为接收方的数据缓存空间有限，窗口值为发送方根据接收方的数据缓存空间来确定 校验和：占2个字节，用来检验报文段首部和数据部分 紧急指针：占16位，指出本报文段中紧急数据共有多少个字节（金及数据放在报文段数据的最前面） TCP的三次握手 三次握手过程A为客户端，B为服务端。 B处于LISTEN（监听）状态，等待客户端发送连接 A发送请求连接报文SYN=1，选择初始序号seq=x B收到A的请求连接后，同意连接像A发送确认报文，SYN=1,ACK=1,确认号ack=x+1,选择一个初始序号seq=y A收到B的确认后再像B发送一个确认ACK=1,确认号ack=y+1,seq=x+1 B收到A的确认后，连接建立 胡七八说： B:我在孤独等待一个人来 A：HELLO！我来啦(第一次握手) B：哦？我收到你的消息了，但是你现在还在吗（第二次握手） A：我现在还在呀（第三次握手） 连接建立 为什么要存在第三次握手 第三次握手是为了防止失效的连接请求到达服务端，服务端打开一个没有用的连接 如果客服端发送的连接请求在网络中滞留好长时间，那么他没有收到服务端的回应他就会重新发送连接，但那个被滞留的连接总有一天会到达服务端，服务端就会为那个滞留的客户端已经丢弃的连接打开一个连接窗口，形成一个没有任何作用的连接。如果有了第三次握手，服务端收到滞留的连接请求后再向它发送一个确认他是否还在的报文，如果他已经不在了那么这个连接就不会被打开 TCP的四次挥手 四次挥手过程A为客户端，B为服务端。 A像B发送一个连接释放报文,FIN=1 B收到A发送的报文后发出确认，此时TCP处于半关闭状态，B可以向A发送数据但A不可以向B发送数据。进入CLOSE-WAIT状态 当B不再需要连接的时候发送释放连接报文FIN=1 A收到B的连接释放报文后向B发出确认，进入TIME-WAIT状态，等待2MSL（最大报文存活时间）后释放连接 B收到A的确认后释放连接 CLOSE-WAIT状态存在的意义 这个状态是为了让服务端继续发送未发送完成的数据，当所有数据发送完毕就进入第三次挥手 TIME-WAIT状态存在的意义 确保第四次挥手的报文发送成功，若B没有收到A的最后一个确认报文，那么就会重新发送连接释放请求报文，在TIME-WAIT状态中的A就可以重新发送确认报文 等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[删点并查集]]></title>
    <url>%2F2019%2F01%2F02%2F%E5%88%A0%E7%82%B9%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[删点并查集，将原来的并查集中的一个点删去的操作就是删点并查集 操作方法因为并查集是树形结构，所以无法简单的把一个节点从一棵树中删去并维护原来的信息。那这里用到的思想就是还是保持原来的树的结构不变，只是把被删掉的那个点设为虚点，并新建一个点，把原来的点映射到这个新点上，代表以后的操作都是对这个新点进行操作。 伪代码int cnt=n ; 表示初始时并查集有n个节点 int index[] ； 如果想要访问i结点，则使用index[i]来访问 如果要删去结点 k ,只需要： index[k] = ++cnt; 这样就通过把要删去的点映射到一个新的节点上来完成了并查集的删点操作 胡七八说第一次听到删点并查集的时候，想破了头也没想到要怎么实现。越想越偏越想越难。 只要我看别人的博客看到了真正的删点并查集实现的时候，我&amp;……*%……&amp;…5%&amp; 真是一个仁者见仁智者见智可爱又皮又很强的操作。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[种类并查集]]></title>
    <url>%2F2018%2F12%2F29%2F%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[种类并查集就是在并查集的基础上对于每个节点增加了一个种类的属性 种类并查集它并查集的一种变形。在这种并查集中，节点被分为了不同的n类（类别一般较少）。其大致结构与并查集相同，但区别在于，分组并查集需要一个relation数组，来存储节点的种类。这就需要注意结点与其根节点之间的关系。下面具体问题具体分析 A Bug’s Life题目链接：POJ-2492 A Bug’s Life 题目大意： 给定n只虫子，不同性别的虫子可以在一起，相同性别的虫子不可以在一起 给你m对虫子，判断中间有没有同性别在一起的虫子 种类并查集解题方法： 先设置两个数组pre[]存他的父亲节点,relation[]数组存他与父亲节点的关系 一个小思考：为什么relation[i]不用来表示i和它儿子的关系而是表示i和他父亲的关系?(很智障的问题) 初始化： relation[i] = 0 表示i与他的父亲节点是同一性别 relation[i] = 1 表示i与他的父亲节点是不同性别 初始时每个虫子的父亲节点都是自己，且自己与自己属于同一性别:pre[i] = i,relation[i] = i 对于每一对新产生关系的虫子x和虫子y,判断他们两个是否来自同一个集合: 若不来自同一集合 fx != fy (fx,fy 表示两只虫子的祖先): 令pre[fx] = fy,然后我们用一个超级神奇的方法！ 向量法 ！来分析他们合并时realtion数组如何变化 根据向量法可以得到 fx-&gt;fy = fx-&gt;x+x-&gt;y+y-&gt;fy 对应到我们的变量： relation[fx] = -relation[x]+1+relation[y] 这样我们的combine就操作完成了 若来自同一集合 fx == fy: 我们依然使用 向量法 来进行分析 根据向量法可以得到 x-&gt;y == x-&gt;fx+fx-&gt;y 对应到我们的变量 v==relation[x]-relation[y] 去过v！=1，就说明他们两个是同性，那么就存在同性在一起的虫子 总结向量表示法！真的无敌好用！妈妈再也不怕我搞不清relation了。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集入门]]></title>
    <url>%2F2018%2F12%2F29%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[并查集真的是一个我超级爱的数据结构，因为超级爱我就去学了一堆关于他的花里胡哨的操作:种类并查集，可持久化并查集，删点并查集….可惜的是打ACM这么久没碰到过一道并查集的题【委屈】，并查集一定要在我的博客里有姓名！ 并查集从名字可以看出来并查集最重要的两个功能是合并和查找 我要用超级有爱的例子来介绍并查集： 话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？ 但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。 两个大侠碰面判断两个人是否属于同一个门派就是并查集里的查找部分 两个大侠如果超级投缘想要界面不求同年同日生巴拉巴拉…就是并查集里的合并部分 并查集实现：创建一个数组int pre[]，这个数组记录自己的上级。首先每个人都是自己的上级，所以每个人的上级节点保存的都是自己的信息：pre[i] = i. 那如何去寻找自己的掌门呢？如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去 寻找掌门代码实现：12345678int find(int x)&#123; int p = x; //委托p去寻找 while(p!=pre[p]) //当p的上级不是自己的时候说明他还不是掌门 p = pre[p]; //让p的上级继续去寻找 //当p = pre[p]的时候说明p的上级就是自己，也就是说p就是掌门 return p;&#125; 如何让给两个人成为朋友属于同一个掌门呢？我想让小x和小y做朋友，那么我只要让给他们的掌门做朋友他们俩个就是朋友啦 代码实现：1234567void combine(int x,int y) //我要让x和y做朋友&#123; int fx = find(x); //x的掌门是fx int fy = find(y); //y的掌门是fy if(fx != fy) //如果他们的掌门是一个人那他们一定就是朋友了 pre[fx] = fy; //如果不是一个人我就让两个掌门发生关系，fx不再是掌门了，他的掌门变成了fy&#125; 路径压缩上面的并查集还有 一丢丢的 小缺点，这颗树型的关系稍微不小心就可能退化成一条链状的关系:( 那么我们怎么避免他退化成一条链呢？ 上面的并查集每个人的上集结点记录的是自己的直接的上级，那我们可不可以让他记录自己的终极大BOSS直接记录自己的掌门呢！显然是可以的！而且这样也很好的避免了退化成一条链的情况，这就是并查集的路径压缩。 那么我们在代码中是怎么实现的呢？ 我们在寻找掌门的时候直接将每个人的上级节点直接只想掌门就oooooook啦 代码如下：123456789101112131415int find(int x)&#123; int p=x; while(p!=pre[x]) //委托p去寻找掌门 p=pre[x]; //现在p就是掌门啦 //我们将x寻找掌门时路过的所有上级的上级节点信息更改为掌门信息 while(x!=p) &#123; int temp = pre[x]; pre[x] = p; x= temp; &#125; return p;&#125; 递归写法：1234int find(int x)&#123; return x==pre[x]? x: pre[x] = find(pre[x]); &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七个常见排序算法]]></title>
    <url>%2F2018%2F12%2F28%2F%E4%B8%83%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[wwwwww终于写完啦，这篇博客写的超累: (提到了冒泡、选择、插排、快排、希尔排序、归并排序和堆排。 冒泡排序这还是一个从大一(?)就开始学的最最最简单的排序算法。遍历数组一次性比较两个数值，如果他们排列顺序错误就将他们交换过来。 算法步骤（从小到大排序）： 从数组的第一个数开始，比较相邻的元素，如果前一个比后一个大，就将他们两个交换 每一轮冒泡结束后，本轮冒泡最大的数都将在数组能遍历到的最后一位，重复上一个步骤 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：123456789101112131415void Bubble_sort(vector&lt;int&gt; &amp;v)&#123; for(int i = 0 ; i &lt; v.size(); i++ ) &#123; for(int j = 0 ;j&lt;v.size()-i ;j++) &#123; if( v[j] &gt; v[j+1] ) //将排序错误的两个数字交换位置 &#123; int temp = v[j]; v[j] = v[j+1]; v[j+1] = temp; &#125; &#125; &#125;&#125; 选择排序也是一种超简单的排序算法。 在未排序的序列中找到最小（大）元素，存放已排序数列的末尾位置。 算法步骤（从大到小排序）： 第i次操作时，在数组v[i——n]中找出最大值，放在v[i]的位置上 操作n-1次排序完成 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：1234567891011121314void selection_sort(vector&lt;int&gt; &amp;v)&#123; for(int i = 0 ;i &lt;v.size();i++) &#123; int flag=i,temp=v[i]; for(int j = i+1; j&lt;v.size();j++) &#123; if(v[j] &gt; temp) flag = j,temp =v[j]; //找到最大值，记录最大值的下标 &#125; v[flag] = v[i]; v[i] = temp; &#125;&#125; 插入排序一种简单直观的排序算法。 它通过构建一个有序数列，将未排序的数据有序的插入有序数列中。 算法步骤（从小到大排序） 第一个数字是有序的 第i此操作，取出v[i]元素，遍历v[1——i],将第i个元素插入到j和k之间的位置，要求v[j]&lt;=v[i]且v[i]&lt;=v[k]; 操作n次后数组有序 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：1234567891011void insertion_sort(vector&lt;int&gt; &amp;v)&#123; for(int i =0 ;i &lt;v.size ;i++) &#123; int index = 0; while( index&lt;i &amp;&amp;&amp; v[index]&lt;=v[i]) index++; //找到合适的插入位置 for(int j=i;j&gt;=index;j--) //将插入位置及以后的元素向后移动 v[j] = v[j-1]; v[index] = v[i]; //将v[i]插入合适的位置 &#125;&#125; 希尔排序希尔排序在插排的基础上做了改进，是第一个时间复杂度小于O(n^2)的算法！ 他将一个序列分成若干个个子序列，然后做组内排序，知道一个组只有一个元素的时候，排序就结束啦。 算法步骤： 选择一个增量序列k(k1,k2,k3,k4)，k4=1 第i次操作选择ki作为增量，每隔ki个元素为一组，如v[ki],v[2ki],v[3ki]…为一组 对组内元素进行排序 直到增量为1排序完成 稳定性：不稳定排序算法 时间复杂度：O(n^(1.3——2)) 代码如下：123456789101112131415161718void shell_sort(vector&lt;int&gt; &amp;v)&#123; int increment = sqrt(v.size()) //给定初始增量 for(int inc = increment ; inc &gt;0 ; inc/=2)//增量一半一半递减直到增量为0 &#123; for(int i =inc ;i&lt;v.size() ;i++) //组内插排 &#123; int temp = v[i]; int j =inc-i; while(j&gt;=0 &amp;&amp; v[j]&gt;temp) &#123; v[j+inc] = v[j]; j-=inc; &#125; v[i] = temp; &#125; &#125;&#125; 快速排序我超级爱用的排序！好用！对冒泡排序用分治的思想进行了优化 通过一次排序使用一个关键字讲序列分为两个部分，比关键字小的左边站，比他大的右边站，然后在对左右两边在操作一次知道操作的区间为1时操作不动了，这个小区间的排序就完成啦。 算法步骤： 从数列中选出一个元素作为基准(一般为了避免时间复杂度到O(n^2),这个基准的选择都是用随机数) 数列中所有元素比基准小的放在左边，比基准大的放在右边 然后再递归的对分好的小区近在进行1，2步操作 知道区间不能再细分退出。 稳定性：不稳定的排序 时间复杂度：O（nlogn——n^2），平均复杂度为O(nlogn) 代码如下：123456789101112131415161718void quick_sort(vector&lt;int&gt; &amp;v,int low,int high)&#123; if(high&lt;=low) return; int left = low, right = high; int key = v[left] //将最左端端点作为基准 while(left != right) &#123; while( left&lt;right &amp;&amp; v[right] &gt;= key) //从后向前找到第一个小于key的数字的位置 right--; v[left] = v[right]; while(left &lt; right &amp;&amp; v[left] &lt;=key)//从前向后找到第一个大于key的数字的位置 left ++; v[right] = v[left]; &#125; v[left] = key ; //把基准放在正确的位置上 quick_sort(v,low,left-1); quick_sort(v,left+1,right);&#125; 归并排序我很少用这个排序，但在求逆序数的时候！如有神助！简直太好用了！我爱归并！归并排序现将序列拆分成几个有序的子序列，再将子序列合并起来使序列有序。 算法步骤： 将长度为n的序列分成长度为n/2的两个子序列 若子序列无序则继续第一个步骤将该子序列分为两个子序列，知道子序列有序 将排好序的两个子序列合并最后变成一个最终的排序序列 稳定性：稳定排序 时间复杂度：O(nlogn) 代码如下：12345678910111213141516171819202122232425262728//按从小到大合并void merge(vector&lt;int&gt; &amp;v , int first ,int mid ,int last)&#123; int i = first ,j = mid+1; vector&lt;&lt;int&gt; temp; while(i&lt;=mid &amp;&amp;&amp; j&lt;=last) &#123; if(a[i]&gt;a[j]) temp.push_back(a[j++]); else temp.push_back(a[i++]); &#125; while(i&lt;=mid) temp.push_back(a[i++]); while(j&lt;=last) temp.push_back(a[j++]); for(int i = 0 ; i &lt; temp.size() ; i++) v[first+i] = temp[i];&#125;void mergesort(vector&lt;int&gt; &amp;v,int first,int last)&#123; if(first &lt; last) &#123; int mid = (first+last)&gt;&gt;1 ; mergesort(v , first , mid); //使左半部分有序 mergesort(v , mid+1 , last);//使右半部分有序 merge(v , first , mid , last); //将有序的左右部分合并 &#125;&#125; 堆排序堆排序肯定是要用堆来实现的！ 算法步骤： 将无序序列构建成一个大顶堆 将堆顶元素与末尾元素交换，将最大元素记录到数组中 调整堆结构使其继续满足大顶堆，反复执行2、3步知道整个序列有序。 稳定性：不稳定排序 时间复杂度：O(nlogn) 代码如下：123456789101112131415161718192021222324252627282930313233void adjust_heap(vector&lt;int&gt; &amp;v,int pre,int len) //调整堆，使堆满足小顶堆的结构&#123; int temp = v[pre]; int child = 2*pre + 1; //左孩子 while(child&lt;len) &#123; if(child+1 &lt; len &amp;&amp; v[child] &lt; v[child+1]) //如果存在右孩子且它的值小于左孩子，则取出右孩子 child++; //如果父节点大于孩子节点，这个堆已经满足大根堆了直接结束 if(temp &gt;= v[child]) break; //否则交换孩子和父亲节点并继续向下调整 v[pre] = v[child] pre = child; child = 2*child+1; &#125; v[pre] = temp;&#125;void heap_sort(vector&lt;int&gt; &amp;v)&#123; //建立初始堆 for(int i = v.size()/2 ; i&gt;=0 ;i--) adjust_heap( v , i , v.size() ); for(int i = v.size()-1 ; i &gt; 0 ;i--) &#123; //取出堆顶元素保存在数组中 int temp = v[i]; v[i] = v[0]; v[0] = temp; //调整堆使堆继续保持大根堆的性质 adjust_heap(v , 0, i); &#125;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HELLO iko!]]></title>
    <url>%2F2018%2F12%2F25%2FHELLO-iko%2F</url>
    <content type="text"><![CDATA[HELLO！想搭博客好久啦，今天终于开始啦冲鸭！快乐！]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
</search>
