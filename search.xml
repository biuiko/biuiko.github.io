<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树链剖分</title>
      <link href="/2019/01/03/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2019/01/03/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>树链剖分，一种对树进行划分的算法，它先通过轻重边剖分将树分为多条链。<br>保证每个点属于且只属于一条链，然后再通过数据结构（树状数组、线段树等）来维护每一条链。<br>它能巧妙地将树上信息映射到线性结构上（如套用线段树），应用广泛。<br><a id="more"></a></p><h3 id="HDU3966"><a href="#HDU3966" class="headerlink" title="HDU3966"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3966" target="_blank" rel="noopener">HDU3966</a></h3><p>题目大意：</p><ul><li>给一棵树，并给定各个点权的值，然后有3种操作：</li><li>I C1 C2 K: 把C1与C2的路径上的所有点权值加上K</li><li>D C1 C2 K：把C1与C2的路径上的所有点权值减去K</li><li>Q C：查询节点编号为C的权值</li></ul><h3 id="树剖在线段树中的应用方式"><a href="#树剖在线段树中的应用方式" class="headerlink" title="树剖在线段树中的应用方式"></a>树剖在线段树中的应用方式</h3><ul><li>树链，就是树上的路径。</li><li>剖分，就是把路径分类为 <strong>重链</strong> 和 <strong>轻链</strong> 。</li><li>树链剖分就是把一些点合成一条路径，使其在线段树中的编号（下标）有序，并用<strong>线段树</strong>来维护。</li><li>假设我们把路径分好链了 （先不要在乎是怎么分的），每次询问两个点对（x，y）时，</li><li>若 x 和 y 在同一链中，直接询问线段树中的 u 和 v （因为同一条链中下标是连续的）</li><li>其中 u ， v 是 x ， y 对应的线段树中的点。</li><li>若不在同一链中，我们从深度大的点上一点一点向上爬，</li><li>每次记录该点所在的链上的情况，直到 x ， y 在同一条链上即可。</li><li>注意：树链剖分中的线段树中每个 点 代表的意义可以是原图的 边 或 点 </li></ul><h3 id="树剖中用到的数组解释"><a href="#树剖中用到的数组解释" class="headerlink" title="树剖中用到的数组解释"></a>树剖中用到的数组解释</h3><ul><li>vector<int>g[maxn] 存图</int></li><li>size[v] 表示以 v 为根的子树的节点数，</li><li>dep[v] 表示 v 的深度(根深度为1)，</li><li>top[v] 表示 v 所在的链的顶端节点，</li><li>fa[v] 表示 v 的父亲，</li><li>son[v] 表示与 v 在同一重链上的 v 的儿子节点（姑且称为重儿子 ），</li><li>tree[v] 表示节点 v 在线段树中的编号，</li><li>rank[v] 表示线段树中编号是 v 的节点所对应的原图中的点（与 tree 相反，互为反函数）</li><li>只需把以上信息求出，即可 O(logN) 处理操作！</li></ul><h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><ul><li>重儿子 ： size[u] 为 v 的子节点中 size 值最大的，那么 u 就是 v 的重儿子。</li><li>轻儿子 ： v 的其它子节点。</li><li>重边 ：点 v 与其重儿子的连边。</li><li>轻边 ：点 v 与其轻儿子的连边。</li><li>重链 ：由 重边 连成的路径。</li><li>轻链 ： 即 轻边 连成的路径。</li></ul><h3 id="树链剖分过程"><a href="#树链剖分过程" class="headerlink" title="树链剖分过程"></a>树链剖分过程</h3><ul><li><p>先跑一个dfs求出fa[],deep[],size[],son[]</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;fa[u]=pre;dep[u]=d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;g[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=g[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==pre)    <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,u,d+<span class="number">1</span>);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        <span class="keyword">if</span>(son[u]==<span class="number">-1</span>||size[v]&gt;size[son[u]])</span><br><span class="line">        &#123;</span><br><span class="line">            son[u]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再跑一个dfs把tree[],top[],rank[]求出来（把树上的节点对应到数组中）,本次dfs使得重儿子连成重链，请儿子连成轻链，每条链都是数组的一段区间。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[u]=++cnt; top[u]=tp; rrank[tree[u]]=u;</span><br><span class="line">    <span class="keyword">if</span>(son[u]==<span class="number">-1</span>)    <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u],tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt;g[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=g[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]||v==fa[u])    <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线段树开始建树，此过程和普通线段树建树过程一样</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    col[rt] = <span class="number">0</span>; <span class="comment">//lazy_tag</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[rt] = camp[rank[l]]; <span class="comment">//camp数组保存每个点的点权</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线段树更新</p><ul><li>假设将 u 到 v 的路径上每条边的权值都加上x。</li><li>记 f1=top[u]，f2=top[v]。</li><li>当 f1!=f2 时，不妨设 dep[f1]≥dep[f2] ，那么就更新 u 到 f1 的权值(时间复杂度为 O(logn) )，并使 u=fa[f1] 。</li><li>当 f1=f2 时, u 与 v 在同一条重链上，直接更新 u 到 v 路径上的点的权值(时间复杂度为 O(logn) )，修改完成；</li><li><p>重复上述过程，直到修改完成！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &lt; dep[top[v]]])  swap(u,v);</span><br><span class="line">        update(tree[top[u]],tree[u],x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        u = fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u,v);</span><br><span class="line">    update(tree[u] , tree[v], x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> sl,<span class="keyword">int</span> sr,<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sl&lt;=l &amp;&amp; r&lt;=sr)</span><br><span class="line">    &#123;</span><br><span class="line">        col[rt] += x;</span><br><span class="line">        sum[rt] += (r-l+<span class="number">1</span>)*v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt,r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(sl&lt;=mid) update(sl,sr,x,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;sr) update(sl,sr,x,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>线段树的查询操作，和普通线段树的操作一样</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> sum[rt];</span><br><span class="line">    pushdown(rt,r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span> , ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid) ans=query(p,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> ans = query(p,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hdu3966完整AC代码"><a href="#hdu3966完整AC代码" class="headerlink" title="hdu3966完整AC代码"></a>hdu3966完整AC代码</h3><div class="spoiler collapsed"><div class="spoiler-title">code</div><div class="spoiler-content"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> camp[maxn],size[maxn],dep[maxn],son[maxn],top[maxn],fa[maxn],tree[maxn],rrank[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt,n;</span><br><span class="line"><span class="comment">/<em></em></span></span><br><span class="line"><span class="comment">size[v] 表示以 v 为根的子树的节点数，</span></span><br><span class="line"><span class="comment">dep[v] 表示 v 的深度(根深度为1)，</span></span><br><span class="line"><span class="comment">top[v] 表示 v 所在的链的顶端节点，</span></span><br><span class="line"><span class="comment">fa[v] 表示 v 的父亲，</span></span><br><span class="line"><span class="comment">son[v] 表示与 v 在同一重链上的 v 的儿子节点（姑且称为 重儿子 ），</span></span><br><span class="line"><span class="comment">tree[v] 表示节点 v 在线段树中的编号，</span></span><br><span class="line"><span class="comment">rrank[v] 表示线段树中编号是 v 的节点所对应的原图中的点（与 tree 相反，互为反函数）</span></span><br><span class="line"><span class="comment">G存图</span></span><br><span class="line"><span class="comment">cnt 线段树分配节点</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="keyword">int</span> col[maxn&lt;&lt;<span class="number">2</span>],sum[maxn&lt;&lt;<span class="number">2</span>];<span class="comment">//线段树</span></span><br><span class="line"><span class="comment">// 把 fa、deep、size、son 求出来</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;fa[u]=pre;dep[u]=d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;G[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==pre)    <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,u,d+<span class="number">1</span>);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">        <span class="keyword">if</span>(size[v]&gt;size[son[u]]||son[u]!=<span class="number">-1</span>)</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将树上节点对应到线段树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[u]=++cnt; top[u]=tp; rrank[tree[u]]=u;</span><br><span class="line">    <span class="keyword">if</span>(son[u]==<span class="number">-1</span>)    <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u],tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt;G[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]||v==fa[u])    <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(col[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        col[rt&lt;&lt;<span class="number">1</span>]+=col[rt];</span><br><span class="line">        col[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=col[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]+=(m-(m&gt;&gt;<span class="number">1</span>))<em>col[rt];</em></span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=(m&gt;&gt;<span class="number">1</span>)col[rt];</span><br><span class="line">        col[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    col[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) </span><br><span class="line">    &#123;</span><br><span class="line">        sum[rt]=camp[rrank[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> sl,<span class="keyword">int</span> sr,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sl&lt;=l&amp;&amp;r&lt;=sr)</span><br><span class="line">    &#123;</span><br><span class="line">        col[rt]+=v;</span><br><span class="line">        sum[rt]+=(r-l+<span class="number">1</span>)*v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt,r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(sl&lt;=mid) update(sl,sr,v,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;sr) update(sl,sr,v ,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) swap(x,y);</span><br><span class="line">        update(tree[top[x]],tree[x],v,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">    update(tree[x],tree[y],v,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> sum[rt];</span><br><span class="line">    pushdown(rt,r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid =(l+r)&gt;&gt;<span class="number">1</span> , ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid)    ans = query(p,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> ans = query(p,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> m,p;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//ini()</span></span><br><span class="line">        <span class="built_in">memset</span>(son,<span class="number">-1</span>,<span class="keyword">sizeof</span>(son));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt;=n ;i++)    G[i].clear();</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ;i&lt;=n ;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;camp[i];</span><br><span class="line">        <span class="keyword">int</span> u,v,c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            G[u].push_back(v);</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs1(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="keyword">while</span>(p–)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">‘I’</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;c;</span><br><span class="line">                change(u,v,c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">‘D’</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;c;</span><br><span class="line">                change(u,v,-c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">‘Q’</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;query(tree[c],<span class="number">1</span>,n,<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP三次握手与四次挥手</title>
      <link href="/2019/01/03/TCP/"/>
      <url>/2019/01/03/TCP/</url>
      
        <content type="html"><![CDATA[<p>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、提供可靠交付的、有拥塞控制和流量控制、基于字节流的传输层协议<br><a id="more"></a></p><h2 id="首部格式"><a href="#首部格式" class="headerlink" title="首部格式"></a>首部格式</h2><p><img src="/image/tcp.png" alt="TCP首部格式"></p><ul><li>源端口和目的端口：各占2个字节，端口是传输层和应用层的服务接口，实现传输层的复用和分用功能</li><li>序号：占4个字节，对字节流进行编号，表示本报文段的第一个字节的序号。例如一个报文段的序号为20，携带的数据长度为30，则下一个期望收到的报文段序号为50。</li><li>确认号：占4个字节，期望收到的下一个报文段的序号</li><li>数据偏移：占4位，指的就是首部长度，表示TCP报文段数据起始处到TCP报文段起始处的位置距离</li><li>保留：占6位，保留为今后使用</li><li>URG：当URG=1时，表明紧急指针字段有效，告诉系统报文段中有紧急数据，应尽快传送</li><li>ACK：当ACK=1是确认号字段才有效</li><li>PSH：PSH=1时，应尽快将报文段交付给应用进程，而不是等缓存满了以后一起交给应用进程</li><li>RST:RST=1时表示TCP连接中出现严重错误，比如主机崩溃等，要求释放链接并重新建立连接</li><li>SYN：SYN=1时表示这个报文是一个连接请求或连接接收的报文</li><li>FIN：FIN=1是表示报文段的发送方已发送完所有数据，要求释放链接。</li><li>窗口：因为接收方的数据缓存空间有限，窗口值为发送方根据接收方的数据缓存空间来确定</li><li>校验和：占2个字节，用来检验报文段首部和数据部分</li><li>紧急指针：占16位，指出本报文段中紧急数据共有多少个字节（金及数据放在报文段数据的最前面）</li></ul><h2 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h2><p><img src="/image/tcphello.png" alt="TCP三次握手"></p><h4 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h4><p>A为客户端，B为服务端。</p><ul><li>B处于LISTEN（监听）状态，等待客户端发送连接</li><li>A发送请求连接报文SYN=1，选择初始序号seq=x</li><li>B收到A的请求连接后，同意连接像A发送确认报文，SYN=1,ACK=1,确认号ack=x+1,选择一个初始序号seq=y</li><li>A收到B的确认后再像B发送一个确认ACK=1,确认号ack=y+1,seq=x+1</li><li>B收到A的确认后，连接建立</li></ul><h4 id="胡七八说："><a href="#胡七八说：" class="headerlink" title="胡七八说："></a>胡七八说：</h4><ul><li>B:我在孤独等待一个人来</li><li>A：HELLO！我来啦(第一次握手)</li><li>B：哦？我收到你的消息了，但是你现在还在吗（第二次握手）</li><li>A：我现在还在呀（第三次握手）</li><li>连接建立</li></ul><h4 id="为什么要存在第三次握手"><a href="#为什么要存在第三次握手" class="headerlink" title="为什么要存在第三次握手"></a>为什么要存在第三次握手</h4><ul><li>第三次握手是为了防止失效的连接请求到达服务端，服务端打开一个没有用的连接</li><li>如果客服端发送的连接请求在网络中滞留好长时间，那么他没有收到服务端的回应他就会重新发送连接，但那个被滞留的连接总有一天会到达服务端，服务端就会为那个滞留的客户端已经丢弃的连接打开一个连接窗口，形成一个没有任何作用的连接。如果有了第三次握手，服务端收到滞留的连接请求后再向它发送一个确认他是否还在的报文，如果他已经不在了那么这个连接就不会被打开</li></ul><h2 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h2><p><img src="/image/tcpbye.png" alt="TCP四次挥手"></p><h4 id="四次挥手过程"><a href="#四次挥手过程" class="headerlink" title="四次挥手过程"></a>四次挥手过程</h4><p>A为客户端，B为服务端。</p><ul><li>A像B发送一个连接释放报文,FIN=1</li><li>B收到A发送的报文后发出确认，此时TCP处于半关闭状态，B可以向A发送数据但A不可以向B发送数据。进入CLOSE-WAIT状态</li><li>当B不再需要连接的时候发送释放连接报文FIN=1</li><li>A收到B的连接释放报文后向B发出确认，进入TIME-WAIT状态，等待2MSL（最大报文存活时间）后释放连接</li><li>B收到A的确认后释放连接</li></ul><h4 id="CLOSE-WAIT状态存在的意义"><a href="#CLOSE-WAIT状态存在的意义" class="headerlink" title="CLOSE-WAIT状态存在的意义"></a>CLOSE-WAIT状态存在的意义</h4><ul><li>这个状态是为了让服务端继续发送未发送完成的数据，当所有数据发送完毕就进入第三次挥手</li></ul><h4 id="TIME-WAIT状态存在的意义"><a href="#TIME-WAIT状态存在的意义" class="headerlink" title="TIME-WAIT状态存在的意义"></a>TIME-WAIT状态存在的意义</h4><ul><li>确保第四次挥手的报文发送成功，若B没有收到A的最后一个确认报文，那么就会重新发送连接释放请求报文，在TIME-WAIT状态中的A就可以重新发送确认报文</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删点并查集</title>
      <link href="/2019/01/02/%E5%88%A0%E7%82%B9%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2019/01/02/%E5%88%A0%E7%82%B9%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>删点并查集，将原来的并查集中的一个点删去的操作就是删点并查集<br><a id="more"></a></p><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>因为并查集是树形结构，所以无法简单的把一个节点从一棵树中删去并维护原来的信息。那这里用到的思想就是还是保持原来的树的结构不变，只是把被删掉的那个点设为虚点，并新建一个点，把原来的点映射到这个新点上，代表以后的操作都是对这个新点进行操作。</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>int cnt=n ;    表示初始时并查集有n个节点 </p><p>int index[] ； 如果想要访问i结点，则使用index[i]来访问</p><p>如果要删去结点 k ,只需要： index[k] = ++cnt;</p><p>这样就通过把要删去的点映射到一个新的节点上来完成了并查集的删点操作</p><h3 id="胡七八说"><a href="#胡七八说" class="headerlink" title="胡七八说"></a>胡七八说</h3><p>第一次听到删点并查集的时候，想破了头也没想到要怎么实现。越想越偏越想越难。</p><p>只要我看别人的博客看到了真正的删点并查集实现的时候，我&amp;……*%……&amp;…5%&amp;</p><p>真是一个仁者见仁智者见智可爱又皮又很强的操作。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>种类并查集</title>
      <link href="/2018/12/29/%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2018/12/29/%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>种类并查集就是在并查集的基础上对于每个节点增加了一个种类的属性<br><a id="more"></a></p><h3 id="种类并查集"><a href="#种类并查集" class="headerlink" title="种类并查集"></a>种类并查集</h3><p>它并查集的一种变形。在这种并查集中，节点被分为了不同的n类（类别一般较少）。其大致结构与并查集相同，但区别在于，分组并查集需要一个relation数组，来存储节点的种类。这就需要注意结点与其根节点之间的关系。下面具体问题具体分析</p><h4 id="A-Bug’s-Life"><a href="#A-Bug’s-Life" class="headerlink" title="A Bug’s Life"></a>A Bug’s Life</h4><p>题目链接：<a href="http://poj.org/problem?id=2492" target="_blank" rel="noopener">POJ-2492 A Bug’s Life</a></p><p>题目大意：</p><ul><li>给定n只虫子，不同性别的虫子可以在一起，相同性别的虫子不可以在一起</li><li>给你m对虫子，判断中间有没有同性别在一起的虫子</li></ul><p>种类并查集解题方法：</p><ul><li><p>先设置两个数组pre[]存他的父亲节点,relation[]数组存他与父亲节点的关系</p><p>  一个小思考：为什么relation[i]不用来表示i和它儿子的关系而是表示i和他父亲的关系?(很智障的问题)</p></li><li>初始化：<ul><li>relation[i] = 0 表示i与他的父亲节点是同一性别 </li><li>relation[i] = 1 表示i与他的父亲节点是不同性别</li><li>初始时每个虫子的父亲节点都是自己，且自己与自己属于同一性别:pre[i] = i,relation[i] = i</li></ul></li><li><p>对于每一对新产生关系的虫子x和虫子y,判断他们两个是否来自同一个集合:</p><ul><li><p>若不来自同一集合 fx != fy (fx,fy 表示两只虫子的祖先):</p><p>  令pre[fx] = fy,然后我们用一个超级神奇的方法！ <strong>向量法</strong> ！来分析他们合并时realtion数组如何变化</p><p>  <img src="/image/v.png" alt="向量法分析"> </p><p>  根据向量法可以得到 fx-&gt;fy = fx-&gt;x+x-&gt;y+y-&gt;fy</p><p>  对应到我们的变量： relation[fx] = -relation[x]+1+relation[y]</p><p>  这样我们的combine就操作完成了</p></li><li><p>若来自同一集合 fx == fy:</p><p>  我们依然使用 <strong>向量法</strong> 来进行分析</p><p>  <img src="/image/vv.png" alt="向量法分析"></p><p>  根据向量法可以得到 x-&gt;y == x-&gt;fx+fx-&gt;y</p><p>  对应到我们的变量 v==relation[x]-relation[y]</p><p>  去过v！=1，就说明他们两个是同性，那么就存在同性在一起的虫子</p></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>向量表示法！真的无敌好用！妈妈再也不怕我搞不清relation了。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集入门</title>
      <link href="/2018/12/29/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8/"/>
      <url>/2018/12/29/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>并查集真的是一个我超级爱的数据结构，因为超级爱我就去学了一堆关于他的花里胡哨的操作:种类并查集，可持久化并查集，删点并查集….可惜的是打ACM这么久没碰到过一道并查集的题【委屈】，并查集一定要在我的博客里有姓名！<br><a id="more"></a></p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>从名字可以看出来并查集最重要的两个功能是合并和查找</p><p>我要用超级有爱的例子来介绍并查集：</p><blockquote><p>话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？</p></blockquote><blockquote><p>但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。<br><img src="/image/UnionFind1.png" alt="门派"></p></blockquote><p>两个大侠碰面判断两个人是否属于同一个门派就是并查集里的查找部分</p><p>两个大侠如果超级投缘想要界面不求同年同日生巴拉巴拉…就是并查集里的合并部分</p><h3 id="并查集实现："><a href="#并查集实现：" class="headerlink" title="并查集实现："></a>并查集实现：</h3><p>创建一个数组int pre[]，这个数组记录自己的上级。<br>首先每个人都是自己的上级，所以每个人的上级节点保存的都是自己的信息：pre[i] = i.</p><h5 id="那如何去寻找自己的掌门呢？"><a href="#那如何去寻找自己的掌门呢？" class="headerlink" title="那如何去寻找自己的掌门呢？"></a>那如何去寻找自己的掌门呢？</h5><p>如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去</p><p>寻找掌门代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = x;      <span class="comment">//委托p去寻找</span></span><br><span class="line">    <span class="keyword">while</span>(p!=pre[p])    <span class="comment">//当p的上级不是自己的时候说明他还不是掌门</span></span><br><span class="line">        p = pre[p];     <span class="comment">//让p的上级继续去寻找</span></span><br><span class="line">    <span class="comment">//当p = pre[p]的时候说明p的上级就是自己，也就是说p就是掌门</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="如何让给两个人成为朋友属于同一个掌门呢？"><a href="#如何让给两个人成为朋友属于同一个掌门呢？" class="headerlink" title="如何让给两个人成为朋友属于同一个掌门呢？"></a>如何让给两个人成为朋友属于同一个掌门呢？</h5><p>我想让小x和小y做朋友，那么我只要让给他们的掌门做朋友他们俩个就是朋友啦</p><p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span>   <span class="comment">//我要让x和y做朋友</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = find(x);   <span class="comment">//x的掌门是fx</span></span><br><span class="line">    <span class="keyword">int</span> fy = find(y);   <span class="comment">//y的掌门是fy</span></span><br><span class="line">    <span class="keyword">if</span>(fx != fy)        <span class="comment">//如果他们的掌门是一个人那他们一定就是朋友了</span></span><br><span class="line">        pre[fx] = fy;   <span class="comment">//如果不是一个人我就让两个掌门发生关系，fx不再是掌门了，他的掌门变成了fy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><p>上面的并查集还有 <del>一丢丢的</del> 小缺点，这颗树型的关系稍微不小心就可能退化成一条链状的关系:(</p><ul><li><p>那么我们怎么避免他退化成一条链呢？</p><p>  上面的并查集每个人的上集结点记录的是自己的直接的上级，那我们可不可以让他记录自己的终极大BOSS直接记录自己的掌门呢！显然是可以的！而且这样也很好的避免了退化成一条链的情况，这就是并查集的路径压缩。</p></li><li><p>那么我们在代码中是怎么实现的呢？</p><p>  我们在寻找掌门的时候直接将每个人的上级节点直接只想掌门就oooooook啦</p></li></ul><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=x;</span><br><span class="line">    <span class="keyword">while</span>(p!=pre[x])    <span class="comment">//委托p去寻找掌门</span></span><br><span class="line">        p=pre[x];</span><br><span class="line">    <span class="comment">//现在p就是掌门啦</span></span><br><span class="line">    <span class="comment">//我们将x寻找掌门时路过的所有上级的上级节点信息更改为掌门信息</span></span><br><span class="line">    <span class="keyword">while</span>(x!=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = pre[x];</span><br><span class="line">        pre[x] = p;</span><br><span class="line">        x= temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>递归写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==pre[x]? x: pre[x] = find(pre[x]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七个常见排序算法</title>
      <link href="/2018/12/28/%E4%B8%83%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2018/12/28/%E4%B8%83%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>wwwwww终于写完啦，这篇博客写的超累: (<br>提到了冒泡、选择、插排、快排、希尔排序、归并排序和堆排。<br><a id="more"></a></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>这还是一个从大一(?)就开始学的最最最简单的排序算法。<br><br>遍历数组一次性比较两个数值，如果他们排列顺序错误就将他们交换过来。</p><p>算法步骤（从小到大排序）：</p><ul><li>从数组的第一个数开始，比较相邻的元素，如果前一个比后一个大，就将他们两个交换</li><li>每一轮冒泡结束后，本轮冒泡最大的数都将在数组能遍历到的最后一位，重复上一个步骤</li></ul><p>稳定性：稳定排序</p><p>时间复杂度：O(n^2)</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bubble_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; v.size(); i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j&lt;v.size()-i ;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( v[j] &gt; v[j+<span class="number">1</span>] )         <span class="comment">//将排序错误的两个数字交换位置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = v[j];</span><br><span class="line">                v[j] = v[j+<span class="number">1</span>];</span><br><span class="line">                v[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>也是一种超简单的排序算法。</p><p>在未排序的序列中找到最小（大）元素，存放已排序数列的末尾位置。</p><p>算法步骤（从大到小排序）：</p><ul><li>第i次操作时，在数组v[i——n]中找出最大值，放在v[i]的位置上</li><li>操作n-1次排序完成</li></ul><p>稳定性：稳定排序</p><p>时间复杂度：O(n^2)</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt;v.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=i,temp=v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;v.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[j] &gt; temp)</span><br><span class="line">                flag = j,temp =v[j];        <span class="comment">//找到最大值，记录最大值的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        v[flag] = v[i];</span><br><span class="line">        v[i] = temp;                       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>一种简单直观的排序算法。</p><p>它通过构建一个有序数列，将未排序的数据有序的插入有序数列中。</p><p>算法步骤（从小到大排序）</p><ul><li>第一个数字是有序的</li><li>第i此操作，取出v[i]元素，遍历v[1——i],将第i个元素插入到j和k之间的位置，要求v[j]&lt;=v[i]且v[i]&lt;=v[k];</li><li>操作n次后数组有序</li></ul><p>稳定性：稳定排序</p><p>时间复杂度：O(n^2)</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt;v.size ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( index&lt;i &amp;&amp;&amp; v[index]&lt;=v[i]) index++;    <span class="comment">//找到合适的插入位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;=index;j--)     <span class="comment">//将插入位置及以后的元素向后移动</span></span><br><span class="line">            v[j] = v[j<span class="number">-1</span>];</span><br><span class="line">        v[index] = v[i];            <span class="comment">//将v[i]插入合适的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序在插排的基础上做了改进，是第一个时间复杂度小于O(n^2)的算法！</p><p>他将一个序列分成若干个个子序列，然后做组内排序，知道一个组只有一个元素的时候，排序就结束啦。</p><p>算法步骤：</p><ul><li>选择一个增量序列k(k1,k2,k3,k4)，k4=1</li><li>第i次操作选择ki作为增量，每隔ki个元素为一组，如v[ki],v[2ki],v[3ki]…为一组</li><li>对组内元素进行排序</li><li>直到增量为1排序完成</li></ul><p>稳定性：不稳定排序算法</p><p>时间复杂度：O(n^(1.3——2))</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> increment = <span class="built_in">sqrt</span>(v.size())  <span class="comment">//给定初始增量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> inc = increment ; inc &gt;<span class="number">0</span> ; inc/=<span class="number">2</span>)<span class="comment">//增量一半一半递减直到增量为0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =inc ;i&lt;v.size() ;i++)    <span class="comment">//组内插排</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = v[i];</span><br><span class="line">            <span class="keyword">int</span> j =inc-i;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; v[j]&gt;temp)</span><br><span class="line">            &#123;</span><br><span class="line">                v[j+inc] = v[j];</span><br><span class="line">                j-=inc;</span><br><span class="line">            &#125;</span><br><span class="line">            v[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>我超级爱用的排序！好用！对冒泡排序用分治的思想进行了优化</p><p>通过一次排序使用一个关键字讲序列分为两个部分，比关键字小的左边站，比他大的右边站，然后在对左右两边在操作一次知道操作的区间为1时操作不动了，这个小区间的排序就完成啦。</p><p>算法步骤：</p><ul><li>从数列中选出一个元素作为基准(一般为了避免时间复杂度到O(n^2),这个基准的选择都是用随机数)</li><li>数列中所有元素比基准小的放在左边，比基准大的放在右边</li><li>然后再递归的对分好的小区近在进行1，2步操作</li><li>知道区间不能再细分退出。</li></ul><p>稳定性：不稳定的排序</p><p>时间复杂度：O（nlogn——n^2），平均复杂度为O(nlogn)</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(high&lt;=low) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> left = low, right = high;</span><br><span class="line">    <span class="keyword">int</span> key = v[left]   <span class="comment">//将最左端端点作为基准</span></span><br><span class="line">    <span class="keyword">while</span>(left != right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>( left&lt;right &amp;&amp; v[right] &gt;= key) <span class="comment">//从后向前找到第一个小于key的数字的位置</span></span><br><span class="line">            right--;</span><br><span class="line">        v[left] = v[right];</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; v[left] &lt;=key)<span class="comment">//从前向后找到第一个大于key的数字的位置</span></span><br><span class="line">            left ++;</span><br><span class="line">        v[right] = v[left];</span><br><span class="line">    &#125;</span><br><span class="line">    v[left] = key ; <span class="comment">//把基准放在正确的位置上</span></span><br><span class="line">    quick_sort(v,low,left<span class="number">-1</span>);</span><br><span class="line">    quick_sort(v,left+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>我很少用这个排序，但在求逆序数的时候！如有神助！简直太好用了！我爱归并！<br>归并排序现将序列拆分成几个有序的子序列，再将子序列合并起来使序列有序。</p><p>算法步骤：</p><ul><li>将长度为n的序列分成长度为n/2的两个子序列</li><li>若子序列无序则继续第一个步骤将该子序列分为两个子序列，知道子序列有序</li><li>将排好序的两个子序列合并最后变成一个最终的排序序列</li></ul><p>稳定性：稳定排序</p><p>时间复杂度：O(nlogn)</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按从小到大合并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v , <span class="keyword">int</span> first ,<span class="keyword">int</span> mid ,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = first ,j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid &amp;&amp;&amp; j&lt;=last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">            temp.push_back(a[j++]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp.push_back(a[i++]);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)   temp.push_back(a[i++]);</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=last)  temp.push_back(a[j++]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; temp.size() ; i++)</span><br><span class="line">        v[first+i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v,<span class="keyword">int</span> first,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first &lt; last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (first+last)&gt;&gt;<span class="number">1</span> ;</span><br><span class="line">        mergesort(v , first , mid); <span class="comment">//使左半部分有序</span></span><br><span class="line">        mergesort(v , mid+<span class="number">1</span> , last);<span class="comment">//使右半部分有序</span></span><br><span class="line">        merge(v , first , mid , last);   <span class="comment">//将有序的左右部分合并</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序肯定是要用堆来实现的！</p><p>算法步骤：</p><ul><li>将无序序列构建成一个大顶堆</li><li>将堆顶元素与末尾元素交换，将最大元素记录到数组中</li><li>调整堆结构使其继续满足大顶堆，反复执行2、3步知道整个序列有序。</li></ul><p>稳定性：不稳定排序</p><p>时间复杂度：O(nlogn)</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust_heap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v,<span class="keyword">int</span> pre,<span class="keyword">int</span> len)</span>    <span class="comment">//调整堆，使堆满足小顶堆的结构</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = v[pre];</span><br><span class="line">    <span class="keyword">int</span> child = <span class="number">2</span>*pre + <span class="number">1</span>;     <span class="comment">//左孩子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(child&lt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span> &lt; len &amp;&amp; v[child] &lt; v[child+<span class="number">1</span>])   <span class="comment">//如果存在右孩子且它的值小于左孩子，则取出右孩子</span></span><br><span class="line">            child++;</span><br><span class="line">        <span class="comment">//如果父节点大于孩子节点，这个堆已经满足大根堆了直接结束</span></span><br><span class="line">        <span class="keyword">if</span>(temp &gt;= v[child])    <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//否则交换孩子和父亲节点并继续向下调整</span></span><br><span class="line">        v[pre] = v[child]</span><br><span class="line">        pre = child;</span><br><span class="line">        child = <span class="number">2</span>*child+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v[pre] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//建立初始堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = v.size()/<span class="number">2</span> ; i&gt;=<span class="number">0</span> ;i--)</span><br><span class="line">        adjust_heap( v , i , v.size() );</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = v.size()<span class="number">-1</span> ; i &gt; <span class="number">0</span> ;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取出堆顶元素保存在数组中</span></span><br><span class="line">        <span class="keyword">int</span> temp = v[i];</span><br><span class="line">        v[i] = v[<span class="number">0</span>];</span><br><span class="line">        v[<span class="number">0</span>] = temp;</span><br><span class="line">        <span class="comment">//调整堆使堆继续保持大根堆的性质</span></span><br><span class="line">        adjust_heap(v , <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HELLO iko!</title>
      <link href="/2018/12/25/HELLO-iko/"/>
      <url>/2018/12/25/HELLO-iko/</url>
      
        <content type="html"><![CDATA[<h1 id="HELLO！"><a href="#HELLO！" class="headerlink" title="HELLO！"></a>HELLO！</h1><p>想搭博客好久啦，今天终于开始啦<br>冲鸭！快乐！</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
