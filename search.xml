<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql优化——查询缓存优化]]></title>
    <url>%2F2019%2F03%2F22%2Fmysql%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[浅谈一下我对查询缓存优化的一些理解，给出几个优化方法和这个方法可以优化的原因 1.查询过程中尽量避免使用SELECT *原因： MySQL客户端和服务端的通信协议是半双工的，如果使用select*,会使服务端想应该客户端的数据非常多，客户端必须完整的接受服务端发送的数据，不能只收取几条然后让服务端停止发送。所以在开发过程中要注意尽量少的使用select*,保持查询简单且只返回所需的数据，减少通信间数据包的大小和数量qwq。 2.用多个小表代替一张大表原因：MySQL的查询缓存系统会跟踪查询中涉及的每个表，如果这些表发生变化，那么和这张表相关的所有缓存数据都会失效，如果缓存有关这张表的数据非常多的时候，失效一次就会带来超级大的系统开销，所以我们尽量（但不要过度）使用多张小表代替一张大表来使缓存不那么容易失效。 3.尽可能批量插入，避免单条插入原因同2，插入一次就会使缓存失效。 4.合理控制缓存空间大小如果查询缓存非常大或者碎片非常多，不仅在写操作时会带来很大的系统开销，在查询操作时，任何查询语句在开始之前都会先在查询缓存中检查（即使它永远不会命中缓存），这里在缓存中进行查找也会带来很大的系统开销。 5.可以通过SQL_CACHE和SQL_NO_CACHE来控制某个查询语句是否缓存胡七八说开查询缓存要谨慎啊qwq 评估查询缓存是否对系统进行了性能优化是一个很复杂的东西 但密集型应用还是不要作死开查询缓存啦ovo]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Requests库和Re库爬取淘宝商品数据]]></title>
    <url>%2F2019%2F03%2F12%2F%E4%BD%BF%E7%94%A8Requests%E5%BA%93%E5%92%8CRe%E5%BA%93%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E5%95%86%E5%93%81%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[定向爬虫实战爬取的url: https://s.taobao.com/search 网站robots协议规定不能爬取，但我只拿来做练习模拟的是人类访问而且不做商业用途，就暂且快乐的爬一下qwq 工具： Ubuntu，python3 ,requests库 功能 输入想要爬取的商品类型 返回商品编号，商品单价，商品描述信息 自定义了一下爬取的深度，只爬了3页信息 实现方法使用requests来获取网页，运用正则匹配来寻找HTML里我们需要的信息 代码实现code12345678910111213141516171819202122232425262728293031323334353637383940414243444546import requestsimport redef getHTMLText(url): try: r = requests.get(url,timeout = 30) r.raise_for_status() r.encoding = r.apparent_encoding return r.text except: print(‘fail to get html’) return ‘’def getgoodslist(ilt,text): try: pricelt = re.findall(r’\”view_price\”:\”[\d.]\”‘,text) namelt = re.findall(r’\”raw_title\”:\”.?\”‘,text) for i in range(len(pricelt)): p = eval(pricelt[i].split(‘:’)[1]) n = eval(namelt[i].split(‘:’)[1]) ilt.append([p,n]) except: print(‘get goods list : error’)def printgoods(ilt): tplt = ‘&#123;0:5&#125;\t&#123;1:10&#125;\t&#123;2:30&#125;’ print(tplt.format(‘序号’,‘单价’,‘描述’)) count = 1 for i in ilt: print(tplt.format(str(count),i[0],i[1])) count += 1if name == ‘main‘: goods = input(‘请输入要搜索的名称:’) #print(goods) url = ‘https://s.taobao.com/search?q=&#39; + goods goodslist = [] depth = 3 for i in range(depth): finall_url = url + ‘&amp;s=’ + str(44*i) # print(finall_url) text = getHTMLText(finall_url) getgoodslist(goodslist,text) printgoods(goodslist) 代码运行结果]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Requests库和bs4库爬取中国最好大学排名]]></title>
    <url>%2F2019%2F03%2F11%2F%E4%BD%BF%E7%94%A8Requests%E5%BA%93%E5%92%8Cbs4%E5%BA%93%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E6%9C%80%E5%A5%BD%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D%2F</url>
    <content type="text"><![CDATA[定向爬虫实战爬取的url: http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html 该网站没有robots协议所以可以快乐的爬取啦！ 工具： ubuntu , python3, requests库，bs4库 功能通过requests库获取网页并使用bs4来解析，获取排名前20的学校的排名，学校名，总分。 代码实现1234567891011121314151617181920212223242526272829303132333435363738import requestsfrom bs4 import BeautifulSoupimport bs4 def getHTMLText(url): try: r = requests.get(url,timeout = 30) r.raise_for_status() r.encoding = r.apparent_encoding return r.text except: print("fail") return ""def fillUnivList(ulist,html): soup = BeautifulSoup(html,"html.parser") for tr in soup.find('tbody').children: if isinstance(tr,bs4.element.Tag): tds = tr('td') ulist.append([tds[0].string,tds[1].string,tds[3].string]) def printUnivList(ulist,num): tilp = "&#123;0:&lt;10&#125;\t&#123;1:&lt;10&#125;\t&#123;2:&lt;10&#125;" print(tilp.format("排名","学校名","总分",chr(12288))) for i in range(num): print(tilp.format(ulist[i][0],ulist[i][1],ulist[i][2],chr(12288)))def main(): uinfo = [] url = "http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html" html = getHTMLText(url) fillUnivList(uinfo,html) printUnivList(uinfo,20)main() 代码运行结果]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python网络爬虫——BeautifulSoup库]]></title>
    <url>%2F2019%2F03%2F11%2Fpython%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94BeautifulSoup%E5%BA%93%2F</url>
    <content type="text"><![CDATA[网络爬虫——冲冲冲 BeautifulSoup库解析HTML界面。 是解析，维护，遍历标签树的功能库 Linux安装方法 sudo apt-get install python3-bs4 BeautifulSoup库的引用方法12from bs4 import BeautifulSoup #引入库中的BeautifulSoup类import bs4 #引入整个库 BeautifulSoup类中的基本元素soup = BeautifulSoup(&#39;&lt;p class = &quot;title&quot;&gt; hello world&lt;/p&gt;&#39;,&#39;html.parser&#39;) Tag: 标签 soup.p : &lt;p class = &quot;title&quot;&gt; hello world&lt;/p&gt; Name: 标签的名字,格式&lt; tag &gt;.name soup.p.name = p Attributes: 标签的属性，字典形式组织，格式：&lt; tag &gt;.attrs 12tag = soup.ptag.attrs[&apos;class&apos;] : [&apos;title&apos;] NavigableString: 标签内非属性字符串,格式：&lt; tag &gt;.string 1soup.p.string : &apos;hello world&apos; Comment: 标签内注释部分的字符串 12345newsoup = BeautifulSoup(&apos;&lt;b&gt;&lt;!--this is comment--&gt;&lt;/b&gt;&lt;p&gt;hello world&lt;/p&gt;&apos;)newsoup.b.string : &apos;this is comment&apos;type(newsoup.b.string) : &lt;class:&apos;bs4.element.Comment&apos;&gt;newsoup.p.string : &apos;hello world&apos;type(newsoup.p.string) : &lt;class:&apos;bs4.element.NavigableString&apos;&gt; BS4库中的遍历方法标签树的下行遍历 .contents: 子节点列表，将所有儿子存在列表中 访问第2个儿子标签：&lt;tag&gt;.contents[2] .children: 子节点的迭代类型，访问所有儿子节点 12for child in &lt;tag&gt;.children: print(child) descendants: 子孙孙孙节点的迭代类型，访问所有子孙节点 12for child in &lt;tag&gt;,descendants: print(child) 标签树的上行遍历 .parent : 节点的父亲标签 .parents: 父父父父节点的迭代类型，访问该节点的父亲，祖父，曾*祖父节点 12345for parent in &lt;tag&gt;.parents: if parent is not None: print(parent) else: print(parent.name) 标签树的平行遍历同属于一个父节点的节点才可以叫做是平行节点 next_sibling: 返回按HTML文本顺序下一个平行节点标签 next_siblings: 返回按HTML文本顺序后续所有平行节点标签 previous_sibling: 返回按HTML文本顺序上一个节点标签 previous_siblings: 返回按HTML文本顺序前续所有平行节点标签]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python网络爬虫——Requests库]]></title>
    <url>%2F2019%2F03%2F10%2Fpython%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94Requests%E5%BA%93%2F</url>
    <content type="text"><![CDATA[网络爬虫——启动！ Requests库自动爬取HTML页面，自动向网络提交请求 Linux安装方法 sudo apt-get install python-requests Requests库的七个主要方法 requests.request() : 构建一个请求，是以下六个方法的基础 requests.get() : 获取HTML网页的主要方法，对应HTTP的GET requests.head() : 获取HTML网页头信息的方法，对应HTTP的HEAD requests.post() : 向HTML网页提交POST请求的方法，对应HTTP的POST requests.put() : 向HTML网页提交PUT请求的方法，对应HTTP的PUT requests.patch() : 向HTML网页提交局部修改请求，对应HTTP的PATCH requests.delete() : 向HTML网页提交删除请求，对应HTTP的DELETE GET:requests.get(url,params=None,**kwargs): url : 想要获取的界面的url连接，例如https://www.baidu.com params : url中的额外参数，字典或字节流格式可选，例如{‘wd’:’hello’},则实际请求的URL为https://www.baidu.com?wd=hello **kwargs : 12个控制访问参数 12def get(url,param=None,**kwargs): return request(&apos;get&apos;,url,params=params,**kwargs) Response对象12import requestsr = requests.get(&quot;https://www.baidu.com&quot;) 其中r就是Response对象，它包含了服务器分返回的所有信息，也包含请求的Request信息。 Response对象的属性 r.status_code : HTTP请求返回的状态码，如：200,404,5033等 t.txt : HTTP相应内容的字符串形式，即url页面对应的相应内容 r.encoding : 从HTTP响应头部解析的编码方式 r.apparent_encoding : 从内容分析出来的编码方式 r.content : HTTP相应内容的二进制形式 Requests库中的异常 requests.ConnectionError : 网络连接错误异常 requests.HTTPError : HTTP错误异常 requests.URLRequired : url缺失异常 requests.TooManyRedirects : 超过最大重定向次数，重定向异常 requests.ConnectionTimeout : 连接服务器超时异常 requests.Timeout : 请求URL超时返回超时异常 Response库中的异常 r.raise_for_status() : 如果r.status_code不是200，则产生requests.HTTPError 该异常多用于try-except来判断是否请求http成功 爬取网页通用的代码框架1234567891011121314import requestsdef getHTMLText(url): try: r = requests.get(url,timeout = 30) r.raisr_for_status() #如果status_code不是200则产生异常 r.encoding = r.apparent_encoding return r.text[:500] #只获取前五百个字符 except: return &quot;获取失败，产生异常&quot;if __name__ == &quot;__main__&quot;: url = &quot;https://www.baidu.com&quot; print(getHTMLText(url))]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树链剖分]]></title>
    <url>%2F2019%2F01%2F03%2F%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%2F</url>
    <content type="text"><![CDATA[树链剖分，一种对树进行划分的算法，它先通过轻重边剖分将树分为多条链。保证每个点属于且只属于一条链，然后再通过数据结构（树状数组、线段树等）来维护每一条链。它能巧妙地将树上信息映射到线性结构上（如套用线段树），应用广泛。 HDU3966题目大意： 给一棵树，并给定各个点权的值，然后有3种操作： I C1 C2 K: 把C1与C2的路径上的所有点权值加上K D C1 C2 K：把C1与C2的路径上的所有点权值减去K Q C：查询节点编号为C的权值 树剖在线段树中的应用方式 树链，就是树上的路径。 剖分，就是把路径分类为 重链 和 轻链 。 树链剖分就是把一些点合成一条路径，使其在线段树中的编号（下标）有序，并用线段树来维护。 假设我们把路径分好链了 （先不要在乎是怎么分的），每次询问两个点对（x，y）时， 若 x 和 y 在同一链中，直接询问线段树中的 u 和 v （因为同一条链中下标是连续的） 其中 u ， v 是 x ， y 对应的线段树中的点。 若不在同一链中，我们从深度大的点上一点一点向上爬， 每次记录该点所在的链上的情况，直到 x ， y 在同一条链上即可。 注意：树链剖分中的线段树中每个 点 代表的意义可以是原图的 边 或 点 树剖中用到的数组解释 vectorg[maxn] 存图 size[v] 表示以 v 为根的子树的节点数， dep[v] 表示 v 的深度(根深度为1)， top[v] 表示 v 所在的链的顶端节点， fa[v] 表示 v 的父亲， son[v] 表示与 v 在同一重链上的 v 的儿子节点（姑且称为重儿子 ）， tree[v] 表示节点 v 在线段树中的编号， rank[v] 表示线段树中编号是 v 的节点所对应的原图中的点（与 tree 相反，互为反函数） 只需把以上信息求出，即可 O(logN) 处理操作！ 术语解释 重儿子 ： size[u] 为 v 的子节点中 size 值最大的，那么 u 就是 v 的重儿子。 轻儿子 ： v 的其它子节点。 重边 ：点 v 与其重儿子的连边。 轻边 ：点 v 与其轻儿子的连边。 重链 ：由 重边 连成的路径。 轻链 ： 即 轻边 连成的路径。 树链剖分过程 先跑一个dfs求出fa[],deep[],size[],son[] 123456789101112131415void dfs1(int u,int pre,int d)&#123; size[u]=1;fa[u]=pre;dep[u]=d; for(int i =0 ; i&lt;g[u].size();i++) &#123; int v=g[u][i]; if(v==pre) continue; dfs1(v,u,d+1); size[u]+=size[v]; if(son[u]==-1||size[v]&gt;size[son[u]]) &#123; son[u]=v; &#125; &#125;&#125; 再跑一个dfs把tree[],top[],rank[]求出来（把树上的节点对应到数组中）,本次dfs使得重儿子连成重链，请儿子连成轻链，每条链都是数组的一段区间。 123456789101112void dfs2(int u,int tp)&#123; tree[u]=++cnt; top[u]=tp; rrank[tree[u]]=u; if(son[u]==-1) return; dfs2(son[u],tp); for(int i =0 ;i &lt;g[u].size();i++) &#123; int v=g[u][i]; if(v==son[u]||v==fa[u]) continue; dfs2(v,v); &#125;&#125; 线段树开始建树，此过程和普通线段树建树过程一样 12345678910111213void build(int l,int r,int rt)&#123; col[rt] = 0; //lazy_tag if(l==r) &#123; sum[rt] = camp[rank[l]]; //camp数组保存每个点的点权 return; &#125; int mid = (l+r)&gt;&gt;1; build(l,mid,rt&lt;&lt;1); build(mid+1,r,rt&lt;&lt;1|1); pushup(rt)&#125; 线段树更新 假设将 u 到 v 的路径上每条边的权值都加上x。 记 f1=top[u]，f2=top[v]。 当 f1!=f2 时，不妨设 dep[f1]≥dep[f2] ，那么就更新 u 到 f1 的权值(时间复杂度为 O(logn) )，并使 u=fa[f1] 。 当 f1=f2 时, u 与 v 在同一条重链上，直接更新 u 到 v 路径上的点的权值(时间复杂度为 O(logn) )，修改完成； 重复上述过程，直到修改完成！ 1234567891011void change(int u,int v,int x)&#123; while(top[u] != top[v]) &#123; if(dep[top[u]] &lt; dep[top[v]]]) swap(u,v); update(tree[top[u]],tree[u],x,1,n,1); u = fa[top[u]]; &#125; if(dep[u] &gt; dep[v]) swap(u,v); update(tree[u] , tree[v], x,1,n,1);&#125; 1234567891011121314void update(int sl,int sr,int x,int l,int r,int rt)&#123; if(sl&lt;=l &amp;&amp; r&lt;=sr) &#123; col[rt] += x; sum[rt] += (r-l+1)*v; return; &#125; pushdown(rt,r-l+1); int mid = (l+r)&gt;&gt;1; if(sl&lt;=mid) update(sl,sr,x,l,mid,rt&lt;&lt;1); if(mid&lt;sr) update(sl,sr,x,mid+1,r,rt&lt;&lt;1|1); pushup(rt);&#125; 线段树的查询操作，和普通线段树的操作一样 123456789void query(int p,int l,int r,int rt)&#123; if(l==r) return sum[rt]; pushdown(rt,r-l+1); int mid = (l+r)&gt;&gt;1 , ans=0; if(p&lt;=mid) ans=query(p,l,mid,rt&lt;&lt;1); else ans = query(p,mid+1,r,rt&lt;&lt;1|1); return ans;&#125; hdu3966完整AC代码code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 50005;int camp[maxn],size[maxn],dep[maxn],son[maxn],top[maxn],fa[maxn],tree[maxn],rrank[maxn];vector&lt;int&gt;G[maxn];int cnt,n;/size[v] 表示以 v 为根的子树的节点数，dep[v] 表示 v 的深度(根深度为1)，top[v] 表示 v 所在的链的顶端节点，fa[v] 表示 v 的父亲，son[v] 表示与 v 在同一重链上的 v 的儿子节点（姑且称为 重儿子 ），tree[v] 表示节点 v 在线段树中的编号，rrank[v] 表示线段树中编号是 v 的节点所对应的原图中的点（与 tree 相反，互为反函数）G存图cnt 线段树分配节点/int col[maxn&lt;&lt;2],sum[maxn&lt;&lt;2];//线段树// 把 fa、deep、size、son 求出来void dfs1(int u,int pre,int d)&#123; size[u]=1;fa[u]=pre;dep[u]=d; for(int i =0 ; i&lt;G[u].size();i++) &#123; int v=G[u][i]; if(v==pre) continue; dfs1(v,u,d+1); size[u]+=size[v]; if(size[v]&gt;size[son[u]]||son[u]!=-1) son[u]=v; &#125;&#125;//将树上节点对应到线段树void dfs2(int u,int tp)&#123; tree[u]=++cnt; top[u]=tp; rrank[tree[u]]=u; if(son[u]==-1) return; dfs2(son[u],tp); for(int i =0 ;i &lt;G[u].size();i++) &#123; int v=G[u][i]; if(v==son[u]||v==fa[u]) continue; dfs2(v,v); &#125;&#125;void pushup(int rt)&#123; sum[rt] = sum[rt&lt;&lt;1]+sum[rt&lt;&lt;1|1];&#125;void pushdown(int rt,int m)&#123; if(col[rt]) &#123; col[rt&lt;&lt;1]+=col[rt]; col[rt&lt;&lt;1|1]+=col[rt]; sum[rt&lt;&lt;1]+=(m-(m&gt;&gt;1))col[rt]; sum[rt&lt;&lt;1|1]+=(m&gt;&gt;1)col[rt]; col[rt]=0; &#125;&#125;void build(int l,int r,int rt)&#123; col[rt]=0; if(l==r) &#123; sum[rt]=camp[rrank[l]]; return; &#125; int mid = (l+r)&gt;&gt;1; build(l,mid,rt&lt;&lt;1); build(mid+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;void update(int sl,int sr,int v,int l,int r,int rt)&#123; if(sl&lt;=l&amp;&amp;r&lt;=sr) &#123; col[rt]+=v; sum[rt]+=(r-l+1)*v; return; &#125; pushdown(rt,r-l+1); int mid = (l+r)&gt;&gt;1; if(sl&lt;=mid) update(sl,sr,v,l,mid,rt&lt;&lt;1); if(mid&lt;sr) update(sl,sr,v ,mid+1,r,rt&lt;&lt;1|1); pushup(rt);&#125;void change(int x,int y,int v)&#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); update(tree[top[x]],tree[x],v,1,n,1); x=fa[top[x]]; &#125; if(dep[x]&gt;dep[y]) swap(x,y); update(tree[x],tree[y],v,1,n,1);&#125;int query(int p,int l,int r,int rt)&#123; if(l==r) return sum[rt]; pushdown(rt,r-l+1); int mid =(l+r)&gt;&gt;1 , ans=0; if(p&lt;=mid) ans = query(p,l,mid,rt&lt;&lt;1); else ans = query(p,mid+1,r,rt&lt;&lt;1|1); return ans;&#125;int main()&#123; ios::sync_with_stdio(false); cin.tie(0); int m,p; while(cin&gt;&gt;n&gt;&gt;m&gt;&gt;p) &#123; //ini() memset(son,-1,sizeof(son)); for(int i =0 ;i &lt;=n ;i++) G[i].clear(); cnt=0; for(int i=1 ;i&lt;=n ;i++) cin&gt;&gt;camp[i]; int u,v,c; for(int i =1 ;i&lt;=m;i++) &#123; cin&gt;&gt;u&gt;&gt;v; G[u].push_back(v); G[v].push_back(u); &#125; dfs1(1,1,1); dfs2(1,1); build(1,n,1); string str; while(p–) &#123; cin&gt;&gt;str; if(str[0]==‘I’) &#123; cin&gt;&gt;u&gt;&gt;v&gt;&gt;c; change(u,v,c); &#125; if(str[0]==‘D’) &#123; cin&gt;&gt;u&gt;&gt;v&gt;&gt;c; change(u,v,-c); &#125; if(str[0]==‘Q’) &#123; cin&gt;&gt;c; cout&lt;&lt;query(tree[c],1,n,1)&lt;&lt;endl; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django通用视图中的get_queryset等函数的使用方法]]></title>
    <url>%2F2019%2F01%2F03%2FDjango%E9%80%9A%E7%94%A8%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84get_queryset%E7%AD%89%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Django通用类视图中一些方法的使用（使用投票网页来举例） 展示对象列表（比如所有问题）-istView 展示某个对象的详细信息（比如一个问题里的所有选项）-DetailView 通过表单创建某个对象（比如创建问题）-CreateView 通过表单更新某个对象信息（比如修改问题里的选项）-UpdateView 用户填写表单后转到某个完成页面-Formview 删除某个对象-DeleteView get_queryset()方法当我们使用Django自带的ListView是，ListView默认返回Model.objects.all();get_queryset()方法可以返回我们自己指定的对象列表 Question: 1234567class Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField(&apos;date pulished&apos;) def __str__(self): return self.question_text def was_published_recently(self): return self.pub_date &gt;= timezone.now() - datetime.timedelta(days=1) 返回Question.objects.all()，将会显示question_text,pub_date等所有信息 123class IndexView(generic.ListView): model = Question template_name = &apos;polls/index.html&apos; 使用context_object_name来指定要显示的项，使用get_queryset来显示我们想要的对象列表，如以下代码只显示近五条question_text 123456class IndexView(generic.ListView): template_name = &apos;polls/index.html&apos; context_object_name = &apos;lastest_question_list&apos; def get_queryset(self): return Question.objects.order_by(&apos;-pub_date&apos;)[:5] 使用get_queryset相当于调用父级的过滤器 未完待续，学到哪里就写到那里吧ovo本文参考：Django基础核心技术介绍(3)]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP三次握手与四次挥手]]></title>
    <url>%2F2019%2F01%2F03%2FTCP%2F</url>
    <content type="text"><![CDATA[TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、提供可靠交付的、有拥塞控制和流量控制、基于字节流的传输层协议 首部格式 源端口和目的端口：各占2个字节，端口是传输层和应用层的服务接口，实现传输层的复用和分用功能 序号：占4个字节，对字节流进行编号，表示本报文段的第一个字节的序号。例如一个报文段的序号为20，携带的数据长度为30，则下一个期望收到的报文段序号为50。 确认号：占4个字节，期望收到的下一个报文段的序号 数据偏移：占4位，指的就是首部长度，表示TCP报文段数据起始处到TCP报文段起始处的位置距离 保留：占6位，保留为今后使用 URG：当URG=1时，表明紧急指针字段有效，告诉系统报文段中有紧急数据，应尽快传送 ACK：当ACK=1是确认号字段才有效 PSH：PSH=1时，应尽快将报文段交付给应用进程，而不是等缓存满了以后一起交给应用进程 RST:RST=1时表示TCP连接中出现严重错误，比如主机崩溃等，要求释放链接并重新建立连接 SYN：SYN=1时表示这个报文是一个连接请求或连接接收的报文 FIN：FIN=1是表示报文段的发送方已发送完所有数据，要求释放链接。 窗口：因为接收方的数据缓存空间有限，窗口值为发送方根据接收方的数据缓存空间来确定 校验和：占2个字节，用来检验报文段首部和数据部分 紧急指针：占16位，指出本报文段中紧急数据共有多少个字节（金及数据放在报文段数据的最前面） TCP的三次握手 三次握手过程A为客户端，B为服务端。 B处于LISTEN（监听）状态，等待客户端发送连接 A发送请求连接报文SYN=1，选择初始序号seq=x B收到A的请求连接后，同意连接像A发送确认报文，SYN=1,ACK=1,确认号ack=x+1,选择一个初始序号seq=y A收到B的确认后再像B发送一个确认ACK=1,确认号ack=y+1,seq=x+1 B收到A的确认后，连接建立 胡七八说： B:我在孤独等待一个人来 A：HELLO！我来啦(第一次握手) B：哦？我收到你的消息了，但是你现在还在吗（第二次握手） A：我现在还在呀（第三次握手） 连接建立 为什么要存在第三次握手 第三次握手是为了防止失效的连接请求到达服务端，服务端打开一个没有用的连接 如果客服端发送的连接请求在网络中滞留好长时间，那么他没有收到服务端的回应他就会重新发送连接，但那个被滞留的连接总有一天会到达服务端，服务端就会为那个滞留的客户端已经丢弃的连接打开一个连接窗口，形成一个没有任何作用的连接。如果有了第三次握手，服务端收到滞留的连接请求后再向它发送一个确认他是否还在的报文，如果他已经不在了那么这个连接就不会被打开 TCP的四次挥手 四次挥手过程A为客户端，B为服务端。 A像B发送一个连接释放报文,FIN=1 B收到A发送的报文后发出确认，此时TCP处于半关闭状态，B可以向A发送数据但A不可以向B发送数据。进入CLOSE-WAIT状态 当B不再需要连接的时候发送释放连接报文FIN=1 A收到B的连接释放报文后向B发出确认，进入TIME-WAIT状态，等待2MSL（最大报文存活时间）后释放连接 B收到A的确认后释放连接 CLOSE-WAIT状态存在的意义 这个状态是为了让服务端继续发送未发送完成的数据，当所有数据发送完毕就进入第三次挥手 TIME-WAIT状态存在的意义 确保第四次挥手的报文发送成功，若B没有收到A的最后一个确认报文，那么就会重新发送连接释放请求报文，在TIME-WAIT状态中的A就可以重新发送确认报文 等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[删点并查集]]></title>
    <url>%2F2019%2F01%2F02%2F%E5%88%A0%E7%82%B9%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[删点并查集，将原来的并查集中的一个点删去的操作就是删点并查集 操作方法因为并查集是树形结构，所以无法简单的把一个节点从一棵树中删去并维护原来的信息。那这里用到的思想就是还是保持原来的树的结构不变，只是把被删掉的那个点设为虚点，并新建一个点，把原来的点映射到这个新点上，代表以后的操作都是对这个新点进行操作。 伪代码int cnt=n ; 表示初始时并查集有n个节点 int index[] ； 如果想要访问i结点，则使用index[i]来访问 如果要删去结点 k ,只需要： index[k] = ++cnt; 这样就通过把要删去的点映射到一个新的节点上来完成了并查集的删点操作 胡七八说第一次听到删点并查集的时候，想破了头也没想到要怎么实现。越想越偏越想越难。 只要我看别人的博客看到了真正的删点并查集实现的时候，我&amp;……*%……&amp;…5%&amp; 真是一个仁者见仁智者见智可爱又皮又很强的操作。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[种类并查集]]></title>
    <url>%2F2018%2F12%2F29%2F%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[种类并查集就是在并查集的基础上对于每个节点增加了一个种类的属性 种类并查集它并查集的一种变形。在这种并查集中，节点被分为了不同的n类（类别一般较少）。其大致结构与并查集相同，但区别在于，分组并查集需要一个relation数组，来存储节点的种类。这就需要注意结点与其根节点之间的关系。下面具体问题具体分析 A Bug’s Life题目链接：POJ-2492 A Bug’s Life 题目大意： 给定n只虫子，不同性别的虫子可以在一起，相同性别的虫子不可以在一起 给你m对虫子，判断中间有没有同性别在一起的虫子 种类并查集解题方法： 先设置两个数组pre[]存他的父亲节点,relation[]数组存他与父亲节点的关系 一个小思考：为什么relation[i]不用来表示i和它儿子的关系而是表示i和他父亲的关系?(很智障的问题) 初始化： relation[i] = 0 表示i与他的父亲节点是同一性别 relation[i] = 1 表示i与他的父亲节点是不同性别 初始时每个虫子的父亲节点都是自己，且自己与自己属于同一性别:pre[i] = i,relation[i] = i 对于每一对新产生关系的虫子x和虫子y,判断他们两个是否来自同一个集合: 若不来自同一集合 fx != fy (fx,fy 表示两只虫子的祖先): 令pre[fx] = fy,然后我们用一个超级神奇的方法！ 向量法 ！来分析他们合并时realtion数组如何变化 根据向量法可以得到 fx-&gt;fy = fx-&gt;x+x-&gt;y+y-&gt;fy 对应到我们的变量： relation[fx] = -relation[x]+1+relation[y] 这样我们的combine就操作完成了 若来自同一集合 fx == fy: 我们依然使用 向量法 来进行分析 根据向量法可以得到 x-&gt;y == x-&gt;fx+fx-&gt;y 对应到我们的变量 v==relation[x]-relation[y] 去过v！=1，就说明他们两个是同性，那么就存在同性在一起的虫子 总结向量表示法！真的无敌好用！妈妈再也不怕我搞不清relation了。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集入门]]></title>
    <url>%2F2018%2F12%2F29%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[并查集真的是一个我超级爱的数据结构，因为超级爱我就去学了一堆关于他的花里胡哨的操作:种类并查集，可持久化并查集，删点并查集….可惜的是打ACM这么久没碰到过一道并查集的题【委屈】，并查集一定要在我的博客里有姓名！ 并查集从名字可以看出来并查集最重要的两个功能是合并和查找 我要用超级有爱的例子来介绍并查集： 话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？ 但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。 两个大侠碰面判断两个人是否属于同一个门派就是并查集里的查找部分 两个大侠如果超级投缘想要界面不求同年同日生巴拉巴拉…就是并查集里的合并部分 并查集实现：创建一个数组int pre[]，这个数组记录自己的上级。首先每个人都是自己的上级，所以每个人的上级节点保存的都是自己的信息：pre[i] = i. 那如何去寻找自己的掌门呢？如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去 寻找掌门代码实现：12345678int find(int x)&#123; int p = x; //委托p去寻找 while(p!=pre[p]) //当p的上级不是自己的时候说明他还不是掌门 p = pre[p]; //让p的上级继续去寻找 //当p = pre[p]的时候说明p的上级就是自己，也就是说p就是掌门 return p;&#125; 如何让给两个人成为朋友属于同一个掌门呢？我想让小x和小y做朋友，那么我只要让给他们的掌门做朋友他们俩个就是朋友啦 代码实现：1234567void combine(int x,int y) //我要让x和y做朋友&#123; int fx = find(x); //x的掌门是fx int fy = find(y); //y的掌门是fy if(fx != fy) //如果他们的掌门是一个人那他们一定就是朋友了 pre[fx] = fy; //如果不是一个人我就让两个掌门发生关系，fx不再是掌门了，他的掌门变成了fy&#125; 路径压缩上面的并查集还有 一丢丢的 小缺点，这颗树型的关系稍微不小心就可能退化成一条链状的关系:( 那么我们怎么避免他退化成一条链呢？ 上面的并查集每个人的上集结点记录的是自己的直接的上级，那我们可不可以让他记录自己的终极大BOSS直接记录自己的掌门呢！显然是可以的！而且这样也很好的避免了退化成一条链的情况，这就是并查集的路径压缩。 那么我们在代码中是怎么实现的呢？ 我们在寻找掌门的时候直接将每个人的上级节点直接只想掌门就oooooook啦 代码如下：123456789101112131415int find(int x)&#123; int p=x; while(p!=pre[x]) //委托p去寻找掌门 p=pre[x]; //现在p就是掌门啦 //我们将x寻找掌门时路过的所有上级的上级节点信息更改为掌门信息 while(x!=p) &#123; int temp = pre[x]; pre[x] = p; x= temp; &#125; return p;&#125; 递归写法：1234int find(int x)&#123; return x==pre[x]? x: pre[x] = find(pre[x]); &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七个常见排序算法]]></title>
    <url>%2F2018%2F12%2F28%2F%E4%B8%83%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[wwwwww终于写完啦，这篇博客写的超累: (提到了冒泡、选择、插排、快排、希尔排序、归并排序和堆排。 冒泡排序这还是一个从大一(?)就开始学的最最最简单的排序算法。遍历数组一次性比较两个数值，如果他们排列顺序错误就将他们交换过来。 算法步骤（从小到大排序）： 从数组的第一个数开始，比较相邻的元素，如果前一个比后一个大，就将他们两个交换 每一轮冒泡结束后，本轮冒泡最大的数都将在数组能遍历到的最后一位，重复上一个步骤 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：123456789101112131415void Bubble_sort(vector&lt;int&gt; &amp;v)&#123; for(int i = 0 ; i &lt; v.size(); i++ ) &#123; for(int j = 0 ;j&lt;v.size()-i ;j++) &#123; if( v[j] &gt; v[j+1] ) //将排序错误的两个数字交换位置 &#123; int temp = v[j]; v[j] = v[j+1]; v[j+1] = temp; &#125; &#125; &#125;&#125; 选择排序也是一种超简单的排序算法。 在未排序的序列中找到最小（大）元素，存放已排序数列的末尾位置。 算法步骤（从大到小排序）： 第i次操作时，在数组v[i——n]中找出最大值，放在v[i]的位置上 操作n-1次排序完成 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：1234567891011121314void selection_sort(vector&lt;int&gt; &amp;v)&#123; for(int i = 0 ;i &lt;v.size();i++) &#123; int flag=i,temp=v[i]; for(int j = i+1; j&lt;v.size();j++) &#123; if(v[j] &gt; temp) flag = j,temp =v[j]; //找到最大值，记录最大值的下标 &#125; v[flag] = v[i]; v[i] = temp; &#125;&#125; 插入排序一种简单直观的排序算法。 它通过构建一个有序数列，将未排序的数据有序的插入有序数列中。 算法步骤（从小到大排序） 第一个数字是有序的 第i此操作，取出v[i]元素，遍历v[1——i],将第i个元素插入到j和k之间的位置，要求v[j]&lt;=v[i]且v[i]&lt;=v[k]; 操作n次后数组有序 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：1234567891011void insertion_sort(vector&lt;int&gt; &amp;v)&#123; for(int i =0 ;i &lt;v.size ;i++) &#123; int index = 0; while( index&lt;i &amp;&amp;&amp; v[index]&lt;=v[i]) index++; //找到合适的插入位置 for(int j=i;j&gt;=index;j--) //将插入位置及以后的元素向后移动 v[j] = v[j-1]; v[index] = v[i]; //将v[i]插入合适的位置 &#125;&#125; 希尔排序希尔排序在插排的基础上做了改进，是第一个时间复杂度小于O(n^2)的算法！ 他将一个序列分成若干个个子序列，然后做组内排序，知道一个组只有一个元素的时候，排序就结束啦。 算法步骤： 选择一个增量序列k(k1,k2,k3,k4)，k4=1 第i次操作选择ki作为增量，每隔ki个元素为一组，如v[ki],v[2ki],v[3ki]…为一组 对组内元素进行排序 直到增量为1排序完成 稳定性：不稳定排序算法 时间复杂度：O(n^(1.3——2)) 代码如下：123456789101112131415161718void shell_sort(vector&lt;int&gt; &amp;v)&#123; int increment = sqrt(v.size()) //给定初始增量 for(int inc = increment ; inc &gt;0 ; inc/=2)//增量一半一半递减直到增量为0 &#123; for(int i =inc ;i&lt;v.size() ;i++) //组内插排 &#123; int temp = v[i]; int j =inc-i; while(j&gt;=0 &amp;&amp; v[j]&gt;temp) &#123; v[j+inc] = v[j]; j-=inc; &#125; v[i] = temp; &#125; &#125;&#125; 快速排序我超级爱用的排序！好用！对冒泡排序用分治的思想进行了优化 通过一次排序使用一个关键字讲序列分为两个部分，比关键字小的左边站，比他大的右边站，然后在对左右两边在操作一次知道操作的区间为1时操作不动了，这个小区间的排序就完成啦。 算法步骤： 从数列中选出一个元素作为基准(一般为了避免时间复杂度到O(n^2),这个基准的选择都是用随机数) 数列中所有元素比基准小的放在左边，比基准大的放在右边 然后再递归的对分好的小区近在进行1，2步操作 知道区间不能再细分退出。 稳定性：不稳定的排序 时间复杂度：O（nlogn——n^2），平均复杂度为O(nlogn) 代码如下：123456789101112131415161718void quick_sort(vector&lt;int&gt; &amp;v,int low,int high)&#123; if(high&lt;=low) return; int left = low, right = high; int key = v[left] //将最左端端点作为基准 while(left != right) &#123; while( left&lt;right &amp;&amp; v[right] &gt;= key) //从后向前找到第一个小于key的数字的位置 right--; v[left] = v[right]; while(left &lt; right &amp;&amp; v[left] &lt;=key)//从前向后找到第一个大于key的数字的位置 left ++; v[right] = v[left]; &#125; v[left] = key ; //把基准放在正确的位置上 quick_sort(v,low,left-1); quick_sort(v,left+1,right);&#125; 归并排序我很少用这个排序，但在求逆序数的时候！如有神助！简直太好用了！我爱归并！归并排序现将序列拆分成几个有序的子序列，再将子序列合并起来使序列有序。 算法步骤： 将长度为n的序列分成长度为n/2的两个子序列 若子序列无序则继续第一个步骤将该子序列分为两个子序列，知道子序列有序 将排好序的两个子序列合并最后变成一个最终的排序序列 稳定性：稳定排序 时间复杂度：O(nlogn) 代码如下：12345678910111213141516171819202122232425262728//按从小到大合并void merge(vector&lt;int&gt; &amp;v , int first ,int mid ,int last)&#123; int i = first ,j = mid+1; vector&lt;&lt;int&gt; temp; while(i&lt;=mid &amp;&amp;&amp; j&lt;=last) &#123; if(a[i]&gt;a[j]) temp.push_back(a[j++]); else temp.push_back(a[i++]); &#125; while(i&lt;=mid) temp.push_back(a[i++]); while(j&lt;=last) temp.push_back(a[j++]); for(int i = 0 ; i &lt; temp.size() ; i++) v[first+i] = temp[i];&#125;void mergesort(vector&lt;int&gt; &amp;v,int first,int last)&#123; if(first &lt; last) &#123; int mid = (first+last)&gt;&gt;1 ; mergesort(v , first , mid); //使左半部分有序 mergesort(v , mid+1 , last);//使右半部分有序 merge(v , first , mid , last); //将有序的左右部分合并 &#125;&#125; 堆排序堆排序肯定是要用堆来实现的！ 算法步骤： 将无序序列构建成一个大顶堆 将堆顶元素与末尾元素交换，将最大元素记录到数组中 调整堆结构使其继续满足大顶堆，反复执行2、3步知道整个序列有序。 稳定性：不稳定排序 时间复杂度：O(nlogn) 代码如下：123456789101112131415161718192021222324252627282930313233void adjust_heap(vector&lt;int&gt; &amp;v,int pre,int len) //调整堆，使堆满足小顶堆的结构&#123; int temp = v[pre]; int child = 2*pre + 1; //左孩子 while(child&lt;len) &#123; if(child+1 &lt; len &amp;&amp; v[child] &lt; v[child+1]) //如果存在右孩子且它的值小于左孩子，则取出右孩子 child++; //如果父节点大于孩子节点，这个堆已经满足大根堆了直接结束 if(temp &gt;= v[child]) break; //否则交换孩子和父亲节点并继续向下调整 v[pre] = v[child] pre = child; child = 2*child+1; &#125; v[pre] = temp;&#125;void heap_sort(vector&lt;int&gt; &amp;v)&#123; //建立初始堆 for(int i = v.size()/2 ; i&gt;=0 ;i--) adjust_heap( v , i , v.size() ); for(int i = v.size()-1 ; i &gt; 0 ;i--) &#123; //取出堆顶元素保存在数组中 int temp = v[i]; v[i] = v[0]; v[0] = temp; //调整堆使堆继续保持大根堆的性质 adjust_heap(v , 0, i); &#125;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HELLO iko!]]></title>
    <url>%2F2018%2F12%2F25%2FHELLO-iko%2F</url>
    <content type="text"><![CDATA[HELLO！想搭博客好久啦，今天终于开始啦冲鸭！快乐！]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
</search>
