<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F12%2F29%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[body { max-width: 980px; border: 1px solid #ddd; outline: 1300px solid #fff; margin: 16px auto; } body .markdown-body { padding: 45px; } @font-face { font-family: fontawesome-mini; src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAABE0AA8AAAAAHWwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABWAAAADsAAABUIIslek9TLzIAAAGUAAAAQwAAAFY3d1HZY21hcAAAAdgAAACqAAACOvWLi0FjdnQgAAAChAAAABMAAAAgBtX/BGZwZ20AAAKYAAAFkAAAC3CKkZBZZ2FzcAAACCgAAAAIAAAACAAAABBnbHlmAAAIMAAABdQAAAjkYT9TNWhlYWQAAA4EAAAAMwAAADYQ6WvNaGhlYQAADjgAAAAfAAAAJAc6A1pobXR4AAAOWAAAACAAAAA0Kmz/7mxvY2EAAA54AAAAHAAAABwQPBJubWF4cAAADpQAAAAgAAAAIAEHC/NuYW1lAAAOtAAAAYQAAALxhQT4h3Bvc3QAABA4AAAAfgAAAMS3SYh9cHJlcAAAELgAAAB6AAAAhuVBK7x4nGNgZGBg4GIwYLBjYHJx8wlh4MtJLMljkGJgYYAAkDwymzEnMz2RgQPGA8qxgGkOIGaDiAIAJjsFSAB4nGNgZHZmnMDAysDAVMW0h4GBoQdCMz5gMGRkAooysDIzYAUBaa4pDA4Pwz+yMwf9z2KIYg5imAYUZgTJAQDcoQvQAHic7ZHNDYJAFIRnBXf94cDRIiyCKkCpwFCPJ092RcKNDoYKcN4+EmMPvpdvk539zQyAPYBCXEUJhBcCrJ5SQ9YLnLJe4qF5rdb+uWPDngNHTkta101pNyWa8lMhn6xx2dqUnW4q9YOIhAOOeueMSgsR/6ry+P7O5s6xVNg4chBsHUuFnWNJ8uZYwrw7chrsHXkODo7cB0dHOYCTY8kv0VE2WJKD6gOlWjsxAAB4nGNgQAMSEMgc9D8LhAESbAPdAHicrVZpd9NGFB15SZyELCULLWphxMRpsEYmbMGACUGyYyBdnK2VoIsUO+m+8Ynf4F/zZNpz6Dd+Wu8bLySQtOdwmpOjd+fN1czbZRJaktgL65GUmy/F1NYmjew8CemGTctRfCg7eyFlisnfBVEQrZbatx2HREQiULWusEQQ+x5ZmmR86FFGy7akV03KLT3pLlvjQb1V334aOsqxO6GkZjN0aD2yJVUYVaJIpj1S0qZlqPorSSu8v8LMV81QwohOImm8GcbQSN4bZ7TKaDW24yiKbLLcKFIkmuFBFHmU1RLn5IoJDMoHzZDyyqcR5cP8iKzYo5xWsEu20/y+L3mndzk/sV9vUbbkQB/Ijuzg7HQlX4RbW2HctJPtKFQRdtd3QmzZ7FT/Zo/ymkYDtysyvdCMYKl8hRArP6HM/iFZLZxP+ZJHo1qykRNB62VO7Es+gdbjiClxzRhZ0N3RCRHU/ZIzDPaYPh788d4plgsTAngcy3pHJZwIEylhczRJ2jByYCVliyqp9a6YOOV1WsRbwn7t2tGXzmjjUHdiPFsPHVs5UcnxaFKnmUyd2knNoykNopR0JnjMrwMoP6JJXm1jNYmVR9M4ZsaERCICLdxLU0EsO7GkKQTNoxm9uRumuXYtWqTJA/Xco/f05la4udNT2g70s0Z/VqdiOtgL0+lp5C/xadrlIkXp+ukZfkziQdYCMpEtNsOUgwdv/Q7Sy9eWHIXXBtju7fMrqH3WRPCkAfsb0B5P1SkJTIWYVYhWQGKta1mWydWsFqnI1HdDmla+rNMEinIcF8e+jHH9XzMzlpgSvt+J07MjLj1z7UsI0xx8m3U9mtepxXIBcWZ5TqdZlu/rNMfyA53mWZ7X6QhLW6ejLD/UaYHlRzodY3lBC5p038GQizDkAg6QMISlA0NYXoIhLBUMYbkIQ1gWYQjLJRjC8mMYwnIZhrC8rGXV1FNJ49qZWAZsQmBijh65zEXlaiq5VEK7aFRqQ54SbpVUFM+qf2WgXjzyhjmwFkiXyJpfMc6Vj0bl+NYVLW8aO1fAsepvH472OfFS1ouFPwX/1dZUJb1izcOTq/Abhp5sJ6o2qXh0TZfPVT26/l9UVFgL9BtIhVgoyrJscGcihI86nYZqoJVDzGzMPLTrdcuan8P9NzFCFlD9+DcUGgvcg05ZSVnt4KzV19uy3DuDcjgTLEkxN/P6VvgiI7PSfpFZyp6PfB5wBYxKZdhqA60VvNknMQ+Z3iTPBHFbUTZI2tjOBIkNHPOAefOdBCZh6qoN5E7hhg34BWFuwXknXKJ6oyyH7kXs8yik/Fun4kT2qGiMwLPZG2Gv70LKb3EMJDT5pX4MVBWhqRg1FdA0Um6oBl/G2bptQsYO9CMqdsOyrOLDxxb3lZJtGYR8pIjVo6Of1l6iTqrcfmYUl++dvgXBIDUxf3vfdHGQyrtayTJHbQNTtxqVU9eaQ+NVh+rmUfW94+wTOWuabronHnpf06rbwcVcLLD2bQ7SUiYX1PVhhQ2iy8WlUOplNEnvuAcYFhjQ71CKjf+r+th8nitVhdFxJN9O1LfR52AM/A/Yf0f1A9D3Y+hyDS7P95oTn2704WyZrqIX66foNzBrrblZugbc0HQD4iFHrY64yg18pwZxeqS5HOkh4GPdFeIBwCaAxeAT3bWM5lMAo/mMOT7A58xh0GQOgy3mMNhmzhrADnMY7DKHwR5zGHzBnHWAL5nDIGQOg4g5DJ4wJwB4yhwGXzGHwdfMYfANc+4DfMscBjFzGCTMYbCv6dYwzC1e0F2gtkFVoANTT1jcw+JQU2XI/o4Xhv29Qcz+wSCm/qjp9pD6Ey8M9WeDmPqLQUz9VdOdIfU3Xhjq7wYx9Q+DmPpMvxjLZQa/jHyXCgeUXWw+5++J9w/bxUC5AAEAAf//AA94nIVVX2hbZRQ/5/t7893s5ja9f7ouzdZ0TTqz3bRJmogbWya6bG6Cq0VbSV2ddIJjFtfIQHEig80Hda8yUN/0YQz8AyriiyD+xQd92R4HCnaCb3samnpumrpsCsLlfPf7zvedc37nL3CAtc/5W/wQZGA3tOBSY/g+TMjHmwzEoM1Q8+ZjRZY4oJhmBw5/YB6Za0yC5AkhlwA1A1yCBIBOwCII0Cj0U8BAMdUCzq05sKwkP7SlUY6fcJk4Fb/RyE79/6P5hjM/F4aZiXBoeMgzcqQ4Xi1hPqfDLG5FT+lchCVU3lYMyvuwhl1mqndQL0RsuloLywHtthLXI06OblTrhfWVnpSJ5+mwu/JdbtuN3IAnkW0LLMcRwaC7ktrlzridM6kVdyf9uO1UNBByI7JhwtG2sEwab07ORBeilWhqavJCqV0qzZTOl/7ZXQ5TbTcdcFelyGhhRDAQpdqp1FEX3w3cFTc1k9pJQkmm4ySCbSikxRP2QOfN+0tHS5MrpQuTU1Mk5nw0E5Xa0WvrOwDyGax9yB9ma6DAg82wHc43SAGTI4GjBWebOePAERFE8/AHaQpZASSTy8A4WwZiLQMQ82mFKATO0ILicRAoDm9p5P99E5b/fXG+kQYY3TYUuqmERWYoT0u/GNYL2q/4WB3LaVS+VynXsVYIcWw6DkCh3nX1D+VzlYN4LClF5yexSQos8exqZ3KVP+wtrC54u4Nznq6cq+xpMpUUnZ8FUYzE86ud0g28NOIv3Gj5/rmA3ABs7S/ywzFuQ4qyd6QxfNtiQIaEgp3w/entQg4Vcbqa16M5FfpeUB8t1+qeg7mI7cUyOe79wOk86gSxkVec4KPTX69++5x68Yubn5/F+w52z7u08sJX7fZXv8ekT/d2mILJxq6sn+SC6qEJknzLJCxyZEKwWVqYmAPBxBE/9DLeZiWHu7lcr/VytrCRuHojncNuTt9h46tmacmYisnSamdN2bZptcsmSysdVsy1PrOvOzF3xN64Rb937t/og9KHxYdcjIUqFAmIAHGHNzlns+RTPgeUYAQm9DwpNxfxbhhBHPaw3/gfTcXO2L+eJVIx5nsyGkvm9X4/f+bGkH45G0PaSjcMXTjcZyTvi3UdHoCDjQd3IDUVsgwYmUoJK/gp4JJxeRI0MKHZIkgynyIBqBTOUs6rOVCojvjZ4mCQz49ZMlMcp8QoYk6NoBfsxnJtsBohpa8iGJS+ZH7gU7NxME6cmF+t7cO9vB8d3jTWSct0ycW9ranXmolNDwmVkNnxe+8JtoztwS5rKJ0xWS95tQ/1zMYzg69MzUZnNtl1ofNbsml/OJm6f9wjRjpnu2o4MzHzn77IQkRd+1DjwMQ2pqSjGMMhyjrgTbBAKksuUm0iU7hI0aN2wOKOq7WYBSH0HGihj/jkiPxAfmwsEbfYrjMG+j3ij932Db/LV7I/xruNrhnroxjR9HRMb2nTvO0ZXOoHPk8H2ZhDPx93qcE/53sH5np/dkIP7zzhTVKdR/BAY/9ElkkR+A6lJGsqpJ4oQcTxpvBT3Kn58VkaJjgHyPEIws57xkaHh9KuVpDEpJZeMbZ5w/zBHi5NMQ4r5VphsFqID7TyB9eR4pX216c3AHxpdAwoqU9qg0ZJ6yVLKmMSz1iG2z27ifx18NkY0LPx1W/wCc2l5LrznrIsiKsqbmB78A9wIGx4tI8rjihVHJyY9pgMirenVq0yWg7Iw7eogG7ZgYM3qR9959A/fZkg6MnD/exlkmc+jWV4SB15XUR+eqC6l6ZmgPtN9z5JMfik05OV8ljylunJ4J+wA/FUaQSSKotsYsCWqaPBidBLcxkWx7XKFRIb45TGaEhjlF9uUVPqXOtcIwsXbBvfoZXIyRYFdkfnqjExH98xpnPczqzjX/uNdO1Y17Wpi5+6Ts8BXtjVFasp9KZ1mOiNbH65c5w6HgmyF2jFCZywM8mWjRc7T5Pmt0lRy7Y71+jYbpGyvwG4sH0XeJxjYGRgYADiwBB/53h+m68M3MwvgCIM1z5N/g6j///9v5H5BbMnkMvBwAQSBQCIcA9gAHicY2BkYGAO+p8FJF/8//v/F/MLBqAICuAFALYQB5kAeJxjfsHAwLwAiCNB+P9fbJjJmoGBMRUo/wKCAfO2EnQAAAAAANoBXgGcAgICVALaA1IDvAPkBAYEPARyAAEAAAANAF0ABAAAAAAAAgAUACQAcwAAAG4LcAAAAAB4nHWRzWrCQBSFT+pPqUIXLXTTzayKUohGKIibCoLuhbrrYtTRxCYZmYyKyz5Fd32HvlDfoO/QkziIFJtw9bvnnpl7ZwLgBt/wcHieGAf2UGd24Atcou+4RH3kuEweO66QXx1XyaHjGh6ROa7jFp/cwStfMVvhy7GHO+/e8QWuvcBxifqz4zL5xXGF/Oa4Sn53XMPE+3Bcx4P3M9DrvYmWoRWNQVN02kFXTPdCU4pSGQu5saE2meiLhU6timPtz3SSs9ypTCdqrJabWJoT5QQnymSRTkXgt0/UkUqVkVbN807ZdtmxdiEWRidi6HqItdErNbN+aO2612qd9sYAGmvsYRBhyUu0EGhQbfK/gzYCdElTOgSdB1eEFBIxFYkNV4RFJWPeZyyYpVQVHTHZx4y/yVGX2LGWFZri51TccUOn5B7nPefVCSPvGhVVwUl9znveO2KkhV8Wk82PZ8qwZf8OVcu1+fSmWCMw/HMOwXvKaysqM+p+cVuWag8tvv+c+xdd+4+teJxtjUEOwiAURJla24KliQfhUA2g/Sl+CKXx+loNrpzVezOLEY34Ron/0WhwQoszOvQYIKFwwQiNSbSBeO2SZ0tBP4j3zVjKNng32ZmtD1VVXCuOiw/pJ8S3WOU6l+K5UOTaDC4+2TjKMtN9KQf1ezLx/Sg/00FCvABHhjDjAAB4nGPw3sFwIihiIyNjX+QGxp0cDBwMyQUbGVidNjEwMmiBGJu5mBg5ICw+BjCLzWkX0wGgNCeQze60i8EBwmZmcNmowtgRGLHBoSNiI3OKy0Y1EG8XRwMDI4tDR3JIBEhJJBBs5mFi5NHawfi/dQNL70YmBhcADHYj9AAA) format('woff'); } .markdown-body { font-family: sans-serif; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; color: #333333; overflow: hidden; font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif; font-size: 16px; line-height: 1.6; word-wrap: break-word; } .markdown-body a { background: transparent; } .markdown-body a:active, .markdown-body a:hover { outline: 0; } .markdown-body b, .markdown-body strong { font-weight: bold; } .markdown-body mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; } .markdown-body sub, .markdown-body sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } .markdown-body sup { top: -0.5em; } .markdown-body sub { bottom: -0.25em; } .markdown-body h1 { font-size: 2em; margin: 0.67em 0; } .markdown-body img { border: 0; } .markdown-body hr { -moz-box-sizing: content-box; box-sizing: content-box; height: 0; } .markdown-body pre { overflow: auto; } .markdown-body code, .markdown-body kbd, .markdown-body pre, .markdown-body samp { font-family: monospace, monospace; font-size: 1em; } .markdown-body input { color: inherit; font: inherit; margin: 0; } .markdown-body html input[disabled] { cursor: default; } .markdown-body input { line-height: normal; } .markdown-body input[type="checkbox"] { box-sizing: border-box; padding: 0; } .markdown-body table { border-collapse: collapse; border-spacing: 0; } .markdown-body td, .markdown-body th { padding: 0; } .markdown-body .codehilitetable { border: 0; border-spacing: 0; } .markdown-body .codehilitetable tr { border: 0; } .markdown-body .codehilitetable pre, .markdown-body .codehilitetable div.codehilite { margin: 0; } .markdown-body .linenos, .markdown-body .code, .markdown-body .codehilitetable td { border: 0; padding: 0; } .markdown-body td:not(.linenos) .linenodiv { padding: 0 !important; } .markdown-body .code { width: 100%; } .markdown-body .linenos div pre, .markdown-body .linenodiv pre, .markdown-body .linenodiv { border: 0; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; -webkit-border-top-left-radius: 3px; -webkit-border-bottom-left-radius: 3px; -moz-border-radius-topleft: 3px; -moz-border-radius-bottomleft: 3px; border-top-left-radius: 3px; border-bottom-left-radius: 3px; } .markdown-body .code div pre, .markdown-body .code div { border: 0; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; -webkit-border-top-right-radius: 3px; -webkit-border-bottom-right-radius: 3px; -moz-border-radius-topright: 3px; -moz-border-radius-bottomright: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; } .markdown-body * { -moz-box-sizing: border-box; box-sizing: border-box; } .markdown-body input { font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; line-height: 1.4; } .markdown-body a { color: #4183c4; text-decoration: none; } .markdown-body a:hover, .markdown-body a:focus, .markdown-body a:active { text-decoration: underline; } .markdown-body hr { height: 0; margin: 15px 0; overflow: hidden; background: transparent; border: 0; border-bottom: 1px solid #ddd; } .markdown-body hr:before, .markdown-body hr:after { display: table; content: " "; } .markdown-body hr:after { clear: both; } .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 { margin-top: 15px; margin-bottom: 15px; line-height: 1.1; } .markdown-body h1 { font-size: 30px; } .markdown-body h2 { font-size: 21px; } .markdown-body h3 { font-size: 16px; } .markdown-body h4 { font-size: 14px; } .markdown-body h5 { font-size: 12px; } .markdown-body h6 { font-size: 11px; } .markdown-body blockquote { margin: 0; } .markdown-body ul, .markdown-body ol { padding: 0; margin-top: 0; margin-bottom: 0; } .markdown-body ol ol, .markdown-body ul ol { list-style-type: lower-roman; } .markdown-body ul ul ol, .markdown-body ul ol ol, .markdown-body ol ul ol, .markdown-body ol ol ol { list-style-type: lower-alpha; } .markdown-body dd { margin-left: 0; } .markdown-body code, .markdown-body pre, .markdown-body samp { font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; font-size: 12px; } .markdown-body pre { margin-top: 0; margin-bottom: 0; } .markdown-body kbd { background-color: #e7e7e7; background-image: -moz-linear-gradient(#fefefe, #e7e7e7); background-image: -webkit-linear-gradient(#fefefe, #e7e7e7); background-image: linear-gradient(#fefefe, #e7e7e7); background-repeat: repeat-x; border-radius: 2px; border: 1px solid #cfcfcf; color: #000; padding: 3px 5px; line-height: 10px; font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace; display: inline-block; } .markdown-body>*:first-child { margin-top: 0 !important; } .markdown-body>*:last-child { margin-bottom: 0 !important; } .markdown-body .headerlink { font: normal 400 16px fontawesome-mini; vertical-align: middle; margin-left: -16px; float: left; display: inline-block; text-decoration: none; opacity: 0; color: #333; } .markdown-body .headerlink:focus { outline: none; } .markdown-body h1 .headerlink { margin-top: 0.8rem; } .markdown-body h2 .headerlink, .markdown-body h3 .headerlink { margin-top: 0.6rem; } .markdown-body h4 .headerlink { margin-top: 0.2rem; } .markdown-body h5 .headerlink, .markdown-body h6 .headerlink { margin-top: 0; } .markdown-body .headerlink:hover, .markdown-body h1:hover .headerlink, .markdown-body h2:hover .headerlink, .markdown-body h3:hover .headerlink, .markdown-body h4:hover .headerlink, .markdown-body h5:hover .headerlink, .markdown-body h6:hover .headerlink { opacity: 1; text-decoration: none; } .markdown-body h1 { padding-bottom: 0.3em; font-size: 2.25em; line-height: 1.2; border-bottom: 1px solid #eee; } .markdown-body h2 { padding-bottom: 0.3em; font-size: 1.75em; line-height: 1.225; border-bottom: 1px solid #eee; } .markdown-body h3 { font-size: 1.5em; line-height: 1.43; } .markdown-body h4 { font-size: 1.25em; } .markdown-body h5 { font-size: 1em; } .markdown-body h6 { font-size: 1em; color: #777; } .markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-body ol, .markdown-body dl, .markdown-body table, .markdown-body pre, .markdown-body .admonition { margin-top: 0; margin-bottom: 16px; } .markdown-body hr { height: 4px; padding: 0; margin: 16px 0; background-color: #e7e7e7; border: 0 none; } .markdown-body ul, .markdown-body ol { padding-left: 2em; } .markdown-body ul ul, .markdown-body ul ol, .markdown-body ol ol, .markdown-body ol ul { margin-top: 0; margin-bottom: 0; } .markdown-body li>p { margin-top: 16px; } .markdown-body dl { padding: 0; } .markdown-body dl dt { padding: 0; margin-top: 16px; font-size: 1em; font-style: italic; font-weight: bold; } .markdown-body dl dd { padding: 0 16px; margin-bottom: 16px; } .markdown-body blockquote { padding: 0 15px; color: #777; border-left: 4px solid #ddd; } .markdown-body blockquote>:first-child { margin-top: 0; } .markdown-body blockquote>:last-child { margin-bottom: 0; } .markdown-body table { display: block; width: 100%; overflow: auto; word-break: normal; word-break: keep-all; } .markdown-body table th { font-weight: bold; } .markdown-body table th, .markdown-body table td { padding: 6px 13px; border: 1px solid #ddd; } .markdown-body table tr { background-color: #fff; border-top: 1px solid #ccc; } .markdown-body table tr:nth-child(2n) { background-color: #f8f8f8; } .markdown-body img { max-width: 100%; -moz-box-sizing: border-box; box-sizing: border-box; } .markdown-body code, .markdown-body samp { padding: 0; padding-top: 0.2em; padding-bottom: 0.2em; margin: 0; font-size: 85%; background-color: rgba(0,0,0,0.04); border-radius: 3px; } .markdown-body code:before, .markdown-body code:after { letter-spacing: -0.2em; content: "\00a0"; } .markdown-body pre>code { padding: 0; margin: 0; font-size: 100%; word-break: normal; white-space: pre; background: transparent; border: 0; } .markdown-body .codehilite { margin-bottom: 16px; } .markdown-body .codehilite pre, .markdown-body pre { padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f7f7f7; border-radius: 3px; } .markdown-body .codehilite pre { margin-bottom: 0; word-break: normal; } .markdown-body pre { word-wrap: normal; } .markdown-body pre code { display: inline; max-width: initial; padding: 0; margin: 0; overflow: initial; line-height: inherit; word-wrap: normal; background-color: transparent; border: 0; } .markdown-body pre code:before, .markdown-body pre code:after { content: normal; } /* Admonition */ .markdown-body .admonition { -webkit-border-radius: 3px; -moz-border-radius: 3px; position: relative; border-radius: 3px; border: 1px solid #e0e0e0; border-left: 6px solid #333; padding: 10px 10px 10px 30px; } .markdown-body .admonition table { color: #333; } .markdown-body .admonition p { padding: 0; } .markdown-body .admonition-title { font-weight: bold; margin: 0; } .markdown-body .admonition>.admonition-title { color: #333; } .markdown-body .attention>.admonition-title { color: #a6d796; } .markdown-body .caution>.admonition-title { color: #d7a796; } .markdown-body .hint>.admonition-title { color: #96c6d7; } .markdown-body .danger>.admonition-title { color: #c25f77; } .markdown-body .question>.admonition-title { color: #96a6d7; } .markdown-body .note>.admonition-title { color: #d7c896; } .markdown-body .admonition:before, .markdown-body .attention:before, .markdown-body .caution:before, .markdown-body .hint:before, .markdown-body .danger:before, .markdown-body .question:before, .markdown-body .note:before { font: normal normal 16px fontawesome-mini; -moz-osx-font-smoothing: grayscale; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; line-height: 1.5; color: #333; position: absolute; left: 0; top: 0; padding-top: 10px; padding-left: 10px; } .markdown-body .admonition:before { content: "\f056\00a0"; color: 333; } .markdown-body .attention:before { content: "\f058\00a0"; color: #a6d796; } .markdown-body .caution:before { content: "\f06a\00a0"; color: #d7a796; } .markdown-body .hint:before { content: "\f05a\00a0"; color: #96c6d7; } .markdown-body .danger:before { content: "\f057\00a0"; color: #c25f77; } .markdown-body .question:before { content: "\f059\00a0"; color: #96a6d7; } .markdown-body .note:before { content: "\f040\00a0"; color: #d7c896; } .markdown-body .admonition::after { content: normal; } .markdown-body .attention { border-left: 6px solid #a6d796; } .markdown-body .caution { border-left: 6px solid #d7a796; } .markdown-body .hint { border-left: 6px solid #96c6d7; } .markdown-body .danger { border-left: 6px solid #c25f77; } .markdown-body .question { border-left: 6px solid #96a6d7; } .markdown-body .note { border-left: 6px solid #d7c896; } .markdown-body .admonition>*:first-child { margin-top: 0 !important; } .markdown-body .admonition>*:last-child { margin-bottom: 0 !important; } /* progress bar*/ .markdown-body .progress { display: block; width: 300px; margin: 10px 0; height: 24px; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; background-color: #ededed; position: relative; box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1); } .markdown-body .progress-label { position: absolute; text-align: center; font-weight: bold; width: 100%; margin: 0; line-height: 24px; color: #333; text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000; -webkit-font-smoothing: antialiased !important; white-space: nowrap; overflow: hidden; } .markdown-body .progress-bar { height: 24px; float: left; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; background-color: #96c6d7; box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1); background-size: 30px 30px; background-image: -webkit-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: -moz-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: -ms-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: -o-linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); background-image: linear-gradient( 135deg, rgba(255, 255, 255, .4) 27%, transparent 27%, transparent 52%, rgba(255, 255, 255, .4) 52%, rgba(255, 255, 255, .4) 77%, transparent 77%, transparent ); } .markdown-body .progress-100plus .progress-bar { background-color: #a6d796; } .markdown-body .progress-80plus .progress-bar { background-color: #c6d796; } .markdown-body .progress-60plus .progress-bar { background-color: #d7c896; } .markdown-body .progress-40plus .progress-bar { background-color: #d7a796; } .markdown-body .progress-20plus .progress-bar { background-color: #d796a6; } .markdown-body .progress-0plus .progress-bar { background-color: #c25f77; } .markdown-body .candystripe-animate .progress-bar{ -webkit-animation: animate-stripes 3s linear infinite; -moz-animation: animate-stripes 3s linear infinite; animation: animate-stripes 3s linear infinite; } @-webkit-keyframes animate-stripes { 0% { background-position: 0 0; } 100% { background-position: 60px 0; } } @-moz-keyframes animate-stripes { 0% { background-position: 0 0; } 100% { background-position: 60px 0; } } @keyframes animate-stripes { 0% { background-position: 0 0; } 100% { background-position: 60px 0; } } .markdown-body .gloss .progress-bar { box-shadow: inset 0 4px 12px rgba(255, 255, 255, .7), inset 0 -12px 0 rgba(0, 0, 0, .05); } /* Multimarkdown Critic Blocks */ .markdown-body .critic_mark { background: #ff0; } .markdown-body .critic_delete { color: #c82829; text-decoration: line-through; } .markdown-body .critic_insert { color: #718c00 ; text-decoration: underline; } .markdown-body .critic_comment { color: #8e908c; font-style: italic; } .markdown-body .headeranchor { font: normal normal 16px fontawesome-mini; line-height: 1; display: inline-block; text-decoration: none; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .headeranchor:before { content: '\e157'; } .markdown-body .task-list-item { list-style-type: none; } .markdown-body .task-list-item+.task-list-item { margin-top: 3px; } .markdown-body .task-list-item input { margin: 0 4px 0.25em -20px; vertical-align: middle; } /* Media */ @media only screen and (min-width: 480px) { .markdown-body { font-size:14px; } } @media only screen and (min-width: 768px) { .markdown-body { font-size:16px; } } @media print { .markdown-body * { background: transparent !important; color: black !important; filter:none !important; -ms-filter: none !important; } .markdown-body { font-size:12pt; max-width:100%; outline:none; border: 0; } .markdown-body a, .markdown-body a:visited { text-decoration: underline; } .markdown-body .headeranchor-link { display: none; } .markdown-body a[href]:after { content: " (" attr(href) ")"; } .markdown-body abbr[title]:after { content: " (" attr(title) ")"; } .markdown-body .ir a:after, .markdown-body a[href^="javascript:"]:after, .markdown-body a[href^="#"]:after { content: ""; } .markdown-body pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; } .markdown-body pre, .markdown-body blockquote { border: 1px solid #999; padding-right: 1em; page-break-inside: avoid; } .markdown-body .progress, .markdown-body .progress-bar { -moz-box-shadow: none; -webkit-box-shadow: none; box-shadow: none; } .markdown-body .progress { border: 1px solid #ddd; } .markdown-body .progress-bar { height: 22px; border-right: 1px solid #ddd; } .markdown-body tr, .markdown-body img { page-break-inside: avoid; } .markdown-body img { max-width: 100% !important; } .markdown-body p, .markdown-body h2, .markdown-body h3 { orphans: 3; widows: 3; } .markdown-body h2, .markdown-body h3 { page-break-after: avoid; } } /*github*/ .codehilite {background-color:#fff;color:#333333;} .codehilite .hll {background-color:#ffffcc;} .codehilite .c{color:#999988;font-style:italic} .codehilite .err{color:#a61717;background-color:#e3d2d2} .codehilite .k{font-weight:bold} .codehilite .o{font-weight:bold} .codehilite .cm{color:#999988;font-style:italic} .codehilite .cp{color:#999999;font-weight:bold} .codehilite .c1{color:#999988;font-style:italic} .codehilite .cs{color:#999999;font-weight:bold;font-style:italic} .codehilite .gd{color:#000000;background-color:#ffdddd} .codehilite .ge{font-style:italic} .codehilite .gr{color:#aa0000} .codehilite .gh{color:#999999} .codehilite .gi{color:#000000;background-color:#ddffdd} .codehilite .go{color:#888888} .codehilite .gp{color:#555555} .codehilite .gs{font-weight:bold} .codehilite .gu{color:#800080;font-weight:bold} .codehilite .gt{color:#aa0000} .codehilite .kc{font-weight:bold} .codehilite .kd{font-weight:bold} .codehilite .kn{font-weight:bold} .codehilite .kp{font-weight:bold} .codehilite .kr{font-weight:bold} .codehilite .kt{color:#445588;font-weight:bold} .codehilite .m{color:#009999} .codehilite .s{color:#dd1144} .codehilite .n{color:#333333} .codehilite .na{color:teal} .codehilite .nb{color:#0086b3} .codehilite .nc{color:#445588;font-weight:bold} .codehilite .no{color:teal} .codehilite .ni{color:purple} .codehilite .ne{color:#990000;font-weight:bold} .codehilite .nf{color:#990000;font-weight:bold} .codehilite .nn{color:#555555} .codehilite .nt{color:navy} .codehilite .nv{color:teal} .codehilite .ow{font-weight:bold} .codehilite .w{color:#bbbbbb} .codehilite .mf{color:#009999} .codehilite .mh{color:#009999} .codehilite .mi{color:#009999} .codehilite .mo{color:#009999} .codehilite .sb{color:#dd1144} .codehilite .sc{color:#dd1144} .codehilite .sd{color:#dd1144} .codehilite .s2{color:#dd1144} .codehilite .se{color:#dd1144} .codehilite .sh{color:#dd1144} .codehilite .si{color:#dd1144} .codehilite .sx{color:#dd1144} .codehilite .sr{color:#009926} .codehilite .s1{color:#dd1144} .codehilite .ss{color:#990073} .codehilite .bp{color:#999999} .codehilite .vc{color:teal} .codehilite .vg{color:teal} .codehilite .vi{color:teal} .codehilite .il{color:#009999} .codehilite .gc{color:#999;background-color:#EAF2F5} 并查集入门并查集真的是一个我超级爱的数据结构，因为超级爱我就去学了一堆关于他的花里胡哨的操作:种类并查集，可持久化并查集，删点并查集....可惜的是打ACM这么久没碰到过一道并查集的题【委屈】，并查集一定要在我的博客里有姓名！ 并查集 从名字可以看出来并查集最重要的两个功能是合并和查找 我要用超级有爱的例子来介绍并查集： 话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？ 但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。 两个大侠碰面判断两个人是否属于同一个门派就是并查集里的查找部分 两个大侠如果超级投缘想要界面不求同年同日生巴拉巴拉&hellip;就是并查集里的合并部分 并查集实现： 创建一个数组int pre[]，这个数组记录自己的上级。 首先每个人都是自己的上级，所以每个人的上级节点保存的都是自己的信息：pre[i] = i. 那如何去寻找自己的掌门呢？ 如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去 寻找掌门代码实现： int find(int x) { int p = x; //委托p去寻找 while(p!=pre[p]) //当p的上级不是自己的时候说明他还不是掌门 p = pre[p]; //让p的上级继续去寻找 //当p = pre[p]的时候说明p的上级就是自己，也就是说p就是掌门 return p; } 如何让给两个人成为朋友属于同一个掌门呢？ 我想让小x和小y做朋友，那么我只要让给他们的掌门做朋友他们俩个就是朋友啦 代码实现： void combine(int x,int y) //我要让x和y做朋友 { int fx = find(x); //x的掌门是fx int fy = find(y); //y的掌门是fy if(fx != fy) //如果他们的掌门是一个人那他们一定就是朋友了 pre[fx] = fy; //如果不是一个人我就让两个掌门发生关系，fx不再是掌门了，他的掌门变成了fy } 路径压缩 上面的并查集还有 一丢丢的 小缺点，这颗树型的关系稍微不小心就可能退化成一条链状的关系:( 那么我们怎么避免他退化成一条链呢？ 上面的并查集每个人的上集结点记录的是自己的直接的上级，那我们可不可以让他记录自己的终极大BOSS直接记录自己的掌门呢！显然是可以的！而且这样也很好的避免了退化成一条链的情况，这就是并查集的路径压缩。 那么我们在代码中是怎么实现的呢？ 我们在寻找掌门的时候直接将每个人的上级节点直接只想掌门就oooooook啦 代码如下： int find(int x) { int p=x; while(p!=pre[x]) //委托p去寻找掌门 p=pre[x]; //现在p就是掌门啦 //我们将x寻找掌门时路过的所有上级的上级节点信息更改为掌门信息 while(x!=p) { int temp = pre[x]; pre[x] = p; x= temp; } return p; } 递归写法： int find(int x) { return x==pre[x]? x: pre[x] = find(pre[x]); }]]></content>
  </entry>
  <entry>
    <title><![CDATA[并查集入门]]></title>
    <url>%2F2018%2F12%2F29%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[并查集真的是一个我超级爱的数据结构，因为超级爱我就去学了一堆关于他的花里胡哨的操作:种类并查集，可持久化并查集，删点并查集….可惜的是打ACM这么久没碰到过一道并查集的题【委屈】，并查集一定要在我的博客里有姓名！ 并查集从名字可以看出来并查集最重要的两个功能是合并和查找 我要用超级有爱的例子来介绍并查集： 话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？ 但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。 两个大侠碰面判断两个人是否属于同一个门派就是并查集里的查找部分 两个大侠如果超级投缘想要界面不求同年同日生巴拉巴拉…就是并查集里的合并部分 并查集实现：创建一个数组int pre[]，这个数组记录自己的上级。首先每个人都是自己的上级，所以每个人的上级节点保存的都是自己的信息：pre[i] = i. 那如何去寻找自己的掌门呢？如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去 寻找掌门代码实现：12345678int find(int x)&#123; int p = x; //委托p去寻找 while(p!=pre[p]) //当p的上级不是自己的时候说明他还不是掌门 p = pre[p]; //让p的上级继续去寻找 //当p = pre[p]的时候说明p的上级就是自己，也就是说p就是掌门 return p;&#125; 如何让给两个人成为朋友属于同一个掌门呢？我想让小x和小y做朋友，那么我只要让给他们的掌门做朋友他们俩个就是朋友啦 代码实现：1234567void combine(int x,int y) //我要让x和y做朋友&#123; int fx = find(x); //x的掌门是fx int fy = find(y); //y的掌门是fy if(fx != fy) //如果他们的掌门是一个人那他们一定就是朋友了 pre[fx] = fy; //如果不是一个人我就让两个掌门发生关系，fx不再是掌门了，他的掌门变成了fy&#125; 路径压缩上面的并查集还有 一丢丢的 小缺点，这颗树型的关系稍微不小心就可能退化成一条链状的关系:( 那么我们怎么避免他退化成一条链呢？ 上面的并查集每个人的上集结点记录的是自己的直接的上级，那我们可不可以让他记录自己的终极大BOSS直接记录自己的掌门呢！显然是可以的！而且这样也很好的避免了退化成一条链的情况，这就是并查集的路径压缩。 那么我们在代码中是怎么实现的呢？ 我们在寻找掌门的时候直接将每个人的上级节点直接只想掌门就oooooook啦 代码如下：123456789101112131415int find(int x)&#123; int p=x; while(p!=pre[x]) //委托p去寻找掌门 p=pre[x]; //现在p就是掌门啦 //我们将x寻找掌门时路过的所有上级的上级节点信息更改为掌门信息 while(x!=p) &#123; int temp = pre[x]; pre[x] = p; x= temp; &#125; return p;&#125; 递归写法：1234int find(int x)&#123; return x==pre[x]? x: pre[x] = find(pre[x]); &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七个常见排序算法]]></title>
    <url>%2F2018%2F12%2F28%2F%E4%B8%83%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[冒泡排序这还是一个从大一(?)就开始学的最最最简单的排序算法。遍历数组一次性比较两个数值，如果他们排列顺序错误就将他们交换过来。 算法步骤（从小到大排序）： 从数组的第一个数开始，比较相邻的元素，如果前一个比后一个大，就将他们两个交换 每一轮冒泡结束后，本轮冒泡最大的数都将在数组能遍历到的最后一位，重复上一个步骤 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：123456789101112131415void Bubble_sort(vector&lt;int&gt; &amp;v)&#123; for(int i = 0 ; i &lt; v.size(); i++ ) &#123; for(int j = 0 ;j&lt;v.size()-i ;j++) &#123; if( v[j] &gt; v[j+1] ) //将排序错误的两个数字交换位置 &#123; int temp = v[j]; v[j] = v[j+1]; v[j+1] = temp; &#125; &#125; &#125;&#125; 选择排序也是一种超简单的排序算法。 在未排序的序列中找到最小（大）元素，存放已排序数列的末尾位置。 算法步骤（从大到小排序）： 第i次操作时，在数组v[i——n]中找出最大值，放在v[i]的位置上 操作n-1次排序完成 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：1234567891011121314void selection_sort(vector&lt;int&gt; &amp;v)&#123; for(int i = 0 ;i &lt;v.size();i++) &#123; int flag=i,temp=v[i]; for(int j = i+1; j&lt;v.size();j++) &#123; if(v[j] &gt; temp) flag = j,temp =v[j]; //找到最大值，记录最大值的下标 &#125; v[flag] = v[i]; v[i] = temp; &#125;&#125; 插入排序一种简单直观的排序算法。 它通过构建一个有序数列，将未排序的数据有序的插入有序数列中。 算法步骤（从小到大排序） 第一个数字是有序的 第i此操作，取出v[i]元素，遍历v[1——i],将第i个元素插入到j和k之间的位置，要求v[j]&lt;=v[i]且v[i]&lt;=v[k]; 操作n次后数组有序 稳定性：稳定排序 时间复杂度：O(n^2) 代码如下：1234567891011void insertion_sort(vector&lt;int&gt; &amp;v)&#123; for(int i =0 ;i &lt;v.size ;i++) &#123; int index = 0; while( index&lt;i &amp;&amp;&amp; v[index]&lt;=v[i]) index++; //找到合适的插入位置 for(int j=i;j&gt;=index;j--) //将插入位置及以后的元素向后移动 v[j] = v[j-1]; v[index] = v[i]; //将v[i]插入合适的位置 &#125;&#125; 希尔排序希尔排序在插排的基础上做了改进，是第一个时间复杂度小于O(n^2)的算法！ 他将一个序列分成若干个个子序列，然后做组内排序，知道一个组只有一个元素的时候，排序就结束啦。 算法步骤： 选择一个增量序列k(k1,k2,k3,k4)，k4=1 第i次操作选择ki作为增量，每隔ki个元素为一组，如v[ki],v[2ki],v[3ki]…为一组 对组内元素进行排序 直到增量为1排序完成 稳定性：不稳定排序算法 时间复杂度：O(n^(1.3——2)) 代码如下：123456789101112131415161718void shell_sort(vector&lt;int&gt; &amp;v)&#123; int increment = sqrt(v.size()) //给定初始增量 for(int inc = increment ; inc &gt;0 ; inc/=2)//增量一半一半递减直到增量为0 &#123; for(int i =inc ;i&lt;v.size() ;i++) //组内插排 &#123; int temp = v[i]; int j =inc-i; while(j&gt;=0 &amp;&amp; v[j]&gt;temp) &#123; v[j+inc] = v[j]; j-=inc; &#125; v[i] = temp; &#125; &#125;&#125; 快速排序我超级爱用的排序！好用！对冒泡排序用分治的思想进行了优化 通过一次排序使用一个关键字讲序列分为两个部分，比关键字小的左边站，比他大的右边站，然后在对左右两边在操作一次知道操作的区间为1时操作不动了，这个小区间的排序就完成啦。 算法步骤： 从数列中选出一个元素作为基准(一般为了避免时间复杂度到O(n^2),这个基准的选择都是用随机数) 数列中所有元素比基准小的放在左边，比基准大的放在右边 然后再递归的对分好的小区近在进行1，2步操作 知道区间不能再细分退出。 稳定性：不稳定的排序 时间复杂度：O（nlogn——n^2），平均复杂度为O(nlogn) 代码如下：123456789101112131415161718void quick_sort(vector&lt;int&gt; &amp;v,int low,int high)&#123; if(high&lt;=low) return; int left = low, right = high; int key = v[left] //将最左端端点作为基准 while(left != right) &#123; while( left&lt;right &amp;&amp; v[right] &gt;= key) //从后向前找到第一个小于key的数字的位置 right--; v[left] = v[right]; while(left &lt; right &amp;&amp; v[left] &lt;=key)//从前向后找到第一个大于key的数字的位置 left ++; v[right] = v[left]; &#125; v[left] = key ; //把基准放在正确的位置上 quick_sort(v,low,left-1); quick_sort(v,left+1,right);&#125; 归并排序我很少用这个排序，但在求逆序数的时候！如有神助！简直太好用了！我爱归并！归并排序现将序列拆分成几个有序的子序列，再将子序列合并起来使序列有序。 算法步骤： 将长度为n的序列分成长度为n/2的两个子序列 若子序列无序则继续第一个步骤将该子序列分为两个子序列，知道子序列有序 将排好序的两个子序列合并最后变成一个最终的排序序列 稳定性：稳定排序 时间复杂度：O(nlogn) 代码如下：12345678910111213141516171819202122232425262728//按从小到大合并void merge(vector&lt;int&gt; &amp;v , int first ,int mid ,int last)&#123; int i = first ,j = mid+1; vector&lt;&lt;int&gt; temp; while(i&lt;=mid &amp;&amp;&amp; j&lt;=last) &#123; if(a[i]&gt;a[j]) temp.push_back(a[j++]); else temp.push_back(a[i++]); &#125; while(i&lt;=mid) temp.push_back(a[i++]); while(j&lt;=last) temp.push_back(a[j++]); for(int i = 0 ; i &lt; temp.size() ; i++) v[first+i] = temp[i];&#125;void mergesort(vector&lt;int&gt; &amp;v,int first,int last)&#123; if(first &lt; last) &#123; int mid = (first+last)&gt;&gt;1 ; mergesort(v , first , mid); //使左半部分有序 mergesort(v , mid+1 , last);//使右半部分有序 merge(v , first , mid , last); //将有序的左右部分合并 &#125;&#125; 堆排序堆排序肯定是要用堆来实现的！ 算法步骤： 将无序序列构建成一个大顶堆 将堆顶元素与末尾元素交换，将最大元素记录到数组中 调整堆结构使其继续满足大顶堆，反复执行2、3步知道整个序列有序。 稳定性：不稳定排序 时间复杂度：O(nlogn) 代码如下：123456789101112131415161718192021222324252627282930313233void adjust_heap(vector&lt;int&gt; &amp;v,int pre,int len) //调整堆，使堆满足小顶堆的结构&#123; int temp = v[pre]; int child = 2*pre + 1; //左孩子 while(child&lt;len) &#123; if(child+1 &lt; len &amp;&amp; v[child] &lt; v[child+1]) //如果存在右孩子且它的值小于左孩子，则取出右孩子 child++; //如果父节点大于孩子节点，这个堆已经满足大根堆了直接结束 if(temp &gt;= v[child]) break; //否则交换孩子和父亲节点并继续向下调整 v[pre] = v[child] pre = child; child = 2*child+1; &#125; v[pre] = temp;&#125;void heap_sort(vector&lt;int&gt; &amp;v)&#123; //建立初始堆 for(int i = v.size()/2 ; i&gt;=0 ;i--) adjust_heap( v , i , v.size() ); for(int i = v.size()-1 ; i &gt; 0 ;i--) &#123; //取出堆顶元素保存在数组中 int temp = v[i]; v[i] = v[0]; v[0] = temp; //调整堆使堆继续保持大根堆的性质 adjust_heap(v , 0, i); &#125;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HELLO iko!]]></title>
    <url>%2F2018%2F12%2F25%2FHELLO-iko%2F</url>
    <content type="text"><![CDATA[HELLO！想搭博客好久啦，今天终于开始啦冲鸭！快乐！]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
</search>
